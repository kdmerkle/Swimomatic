namespace Swimomatic.ServiceProvider
{
    using LAAF.Data;
    using LAAF.Data.SqlClient;
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The SwimomaticServiceProvider class is the MS SQL service provider.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Generated on 02/29/2012] - Generated by LAAF CodeGen
    // </history>
    public class SwimomaticServiceProviderSQL : Swimomatic.ServiceProvider.SwimomaticServiceProvider
    {
        
        protected System.Data.SqlClient.SqlTransaction _SqlTransaction;
        
        #region  Constructor 
        public SwimomaticServiceProviderSQL()
        {
            _ConnectionString = System.Configuration.ConfigurationManager.AppSettings["Swimomatic.ServiceProvider.ConnectionString"];
        }
        
        public SwimomaticServiceProviderSQL(string connectionString) : 
                base(connectionString)
        {
        }
        #endregion
        
        #region  Transaction Support 
        public override void BeginTransaction()
        {
            System.Data.SqlClient.SqlConnection oSqlConnection = new System.Data.SqlClient.SqlConnection(ConnectionString);
            oSqlConnection.Open();
            _SqlTransaction = oSqlConnection.BeginTransaction(System.Data.IsolationLevel.ReadUncommitted);
        }
        
        public override void BeginTransaction(string connectionString)
        {
            System.Data.SqlClient.SqlConnection oSqlConnection = new System.Data.SqlClient.SqlConnection(connectionString);
            oSqlConnection.Open();
            _SqlTransaction = oSqlConnection.BeginTransaction(System.Data.IsolationLevel.ReadUncommitted);
        }
        
        public override void CommitTransaction()
        {
            System.Data.SqlClient.SqlConnection oSqlConnection = _SqlTransaction.Connection;
            _SqlTransaction.Commit();
            oSqlConnection.Close();
            _SqlTransaction = null;
        }
        
        public override void RollbackTransaction()
        {
            System.Data.SqlClient.SqlConnection oSqlConnection = _SqlTransaction.Connection;
            _SqlTransaction.Rollback();
            oSqlConnection.Close();
            _SqlTransaction = null;
        }
        #endregion
        
        #region AgeClassManager methods 
        public override int AgeClassSave(int AgeClassID, string Description, bool IsMale, int MaxAge, int MinAge)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@AgeClassID", Helper.CheckForNullValue(AgeClassID)),
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@IsMale", Helper.CheckForNullValue(IsMale)),
                    new System.Data.SqlClient.SqlParameter("@MaxAge", Helper.CheckForNullValue(MaxAge)),
                    new System.Data.SqlClient.SqlParameter("@MinAge", Helper.CheckForNullValue(MinAge))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_AgeClassSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_AgeClassSave", arrSqlParameter)));
            }
        }
        
        public override void AgeClassDelete(int AgeClassID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@AgeClassID", Helper.CheckForNullValue(AgeClassID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_AgeClassDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_AgeClassDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader AgeClassGet(int AgeClassID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@AgeClassID", Helper.CheckForNullValue(AgeClassID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_AgeClassGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_AgeClassGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader AgeClassGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_AgeClassGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_AgeClassGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader AgeClassGetByAgeClassRuleIDBirthDate(int AgeClassRuleID, System.DateTime BirthDate)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@AgeClassRuleID", Helper.CheckForNullValue(AgeClassRuleID)),
                    new System.Data.SqlClient.SqlParameter("@BirthDate", Helper.CheckForNullValue(BirthDate))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_AgeClassGetByAgeClassRuleIDBirthDate", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_AgeClassGetByAgeClassRuleIDBirthDate", arrSqlParameter)));
            }
        }
        #endregion
        
        #region AgeClassRuleManager methods 
        public override System.Data.IDataReader AgeClassRuleGet(int AgeClassRuleID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@AgeClassRuleID", Helper.CheckForNullValue(AgeClassRuleID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_AgeClassRuleGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_AgeClassRuleGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader AgeClassRuleGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_AgeClassRuleGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_AgeClassRuleGetAll", arrSqlParameter)));
            }
        }
        #endregion
        
        #region HeatManager methods 
        public override int HeatSave(int HeatID, int HeatNumber, int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID)),
                    new System.Data.SqlClient.SqlParameter("@HeatNumber", Helper.CheckForNullValue(HeatNumber)),
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_HeatSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_HeatSave", arrSqlParameter)));
            }
        }
        
        public override void HeatDelete(int HeatID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_HeatDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_HeatDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader HeatGet(int HeatID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatGetByHeatSwimmerID(int HeatSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSwimmerID", Helper.CheckForNullValue(HeatSwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatGetByHeatSwimmerID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatGetByHeatSwimmerID", arrSqlParameter)));
            }
        }
        
        public override void HeatDeleteByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_HeatDeleteByHeatSheetEventID", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_HeatDeleteByHeatSheetEventID", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader HeatGetAllByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatGetAllByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatGetAllByHeatSheetEventID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region HeatSheetEventManager methods 
        public override int HeatSheetEventSave(int Distance, int HeatSheetEventID, int HeatSheetID, int Sequence, int SwimEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Distance", Helper.CheckForNullValue(Distance)),
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID)),
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID)),
                    new System.Data.SqlClient.SqlParameter("@Sequence", Helper.CheckForNullValue(Sequence)),
                    new System.Data.SqlClient.SqlParameter("@SwimEventID", Helper.CheckForNullValue(SwimEventID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_HeatSheetEventSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_HeatSheetEventSave", arrSqlParameter)));
            }
        }
        
        public override void HeatSheetEventDelete(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_HeatSheetEventDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_HeatSheetEventDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader HeatSheetEventGet(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetEventGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetEventGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSheetEventGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetEventGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetEventGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSheetEventGetByHeatSwimmerID(int HeatSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSwimmerID", Helper.CheckForNullValue(HeatSwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetEventGetByHeatSwimmerID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetEventGetByHeatSwimmerID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSheetEventGetByHeatID(int HeatID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetEventGetByHeatID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetEventGetByHeatID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSheetEventGetByDistanceSwimEventIDHeatSheetID(int Distance, int HeatSheetID, int SwimEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Distance", Helper.CheckForNullValue(Distance)),
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID)),
                    new System.Data.SqlClient.SqlParameter("@SwimEventID", Helper.CheckForNullValue(SwimEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetEventGetByDistanceSwimEventIDHeatSheetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetEventGetByDistanceSwimEventIDHeatSheetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSheetEventGetAllByHeatSheetID(int HeatSheetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetEventGetAllByHeatSheetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetEventGetAllByHeatSheetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSheetEventGetAllByHeatSheetIDSystemUserID(int HeatSheetID, int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetEventGetAllByHeatSheetIDSystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetEventGetAllByHeatSheetIDSystemUserID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region HeatSheetManager methods 
        public override int HeatSheetSave(int HeatSheetID, int PoolConfigID, int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID)),
                    new System.Data.SqlClient.SqlParameter("@PoolConfigID", Helper.CheckForNullValue(PoolConfigID)),
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_HeatSheetSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_HeatSheetSave", arrSqlParameter)));
            }
        }
        
        public override void HeatSheetDelete(int HeatSheetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_HeatSheetDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_HeatSheetDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader HeatSheetGet(int HeatSheetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSheetGetAllBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetGetAllBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetGetAllBySwimMeetID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region HeatSheetTeamManager methods 
        public override int HeatSheetTeamSave(int HeatSheetID, int HeatSheetTeamID, string Lanes, int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID)),
                    new System.Data.SqlClient.SqlParameter("@HeatSheetTeamID", Helper.CheckForNullValue(HeatSheetTeamID)),
                    new System.Data.SqlClient.SqlParameter("@Lanes", Helper.CheckForNullValue(Lanes)),
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_HeatSheetTeamSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_HeatSheetTeamSave", arrSqlParameter)));
            }
        }
        
        public override void HeatSheetTeamDelete(int HeatSheetTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetTeamID", Helper.CheckForNullValue(HeatSheetTeamID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_HeatSheetTeamDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_HeatSheetTeamDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader HeatSheetTeamGet(int HeatSheetTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetTeamID", Helper.CheckForNullValue(HeatSheetTeamID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetTeamGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetTeamGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSheetTeamGetAllByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSheetTeamGetAllByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSheetTeamGetAllByHeatSheetEventID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region HeatSwimmerManager methods 
        public override int HeatSwimmerSave(int HeatID, int HeatSwimmerID, int LaneNumber, int Leg, int SeedResultID, int SwimmerTeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID)),
                    new System.Data.SqlClient.SqlParameter("@HeatSwimmerID", Helper.CheckForNullValue(HeatSwimmerID)),
                    new System.Data.SqlClient.SqlParameter("@LaneNumber", Helper.CheckForNullValue(LaneNumber)),
                    new System.Data.SqlClient.SqlParameter("@Leg", Helper.CheckForNullValue(Leg)),
                    new System.Data.SqlClient.SqlParameter("@SeedResultID", Helper.CheckForNullValue(SeedResultID)),
                    new System.Data.SqlClient.SqlParameter("@SwimmerTeamSeasonID", Helper.CheckForNullValue(SwimmerTeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_HeatSwimmerSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_HeatSwimmerSave", arrSqlParameter)));
            }
        }
        
        public override void HeatSwimmerDelete(int HeatSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSwimmerID", Helper.CheckForNullValue(HeatSwimmerID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_HeatSwimmerDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_HeatSwimmerDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader HeatSwimmerGet(int HeatSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSwimmerID", Helper.CheckForNullValue(HeatSwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSwimmerGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSwimmerGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSwimmerGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSwimmerGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSwimmerGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSwimmerGetAllBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSwimmerGetAllBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSwimmerGetAllBySwimMeetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSwimmerGetByLaneNumberHeatID(int LaneNumber, int HeatID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LaneNumber", Helper.CheckForNullValue(LaneNumber)),
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSwimmerGetByLaneNumberHeatID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSwimmerGetByLaneNumberHeatID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSwimmerGetAllByHeatID(int HeatID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSwimmerGetAllByHeatID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSwimmerGetAllByHeatID", arrSqlParameter)));
            }
        }
        
        public override void HeatSwimmerDeleteByHeatID(int HeatID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_HeatSwimmerDeleteByHeatID", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_HeatSwimmerDeleteByHeatID", arrSqlParameter);
            }
        }
        
        public override void HeatSwimmerDeleteByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_HeatSwimmerDeleteByHeatSheetEventID", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_HeatSwimmerDeleteByHeatSheetEventID", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader HeatSwimmerGetAllByHeatIDLaneNumber(int HeatID, int LaneNumber)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID)),
                    new System.Data.SqlClient.SqlParameter("@LaneNumber", Helper.CheckForNullValue(LaneNumber))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSwimmerGetAllByHeatIDLaneNumber", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSwimmerGetAllByHeatIDLaneNumber", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSwimmerGetAllByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSwimmerGetAllByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSwimmerGetAllByHeatSheetEventID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSwimmerGetAllRelayTeammatesByHeatSwimmerID(int HeatSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSwimmerID", Helper.CheckForNullValue(HeatSwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSwimmerGetAllRelayTeammatesByHeatSwimmerID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSwimmerGetAllRelayTeammatesByHeatSwimmerID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader HeatSwimmerGetAllByHeatSheetID(int HeatSheetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_HeatSwimmerGetAllByHeatSheetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_HeatSwimmerGetAllByHeatSheetID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region LaneSequenceManager methods 
        public override System.Data.IDataReader LaneSequenceGetAllByLaneCount(int LaneCount)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LaneCount", Helper.CheckForNullValue(LaneCount))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LaneSequenceGetAllByLaneCount", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LaneSequenceGetAllByLaneCount", arrSqlParameter)));
            }
        }
        #endregion
        
        #region LeagueManager methods 
        public override int LeagueSave(string Description, int LeagueID, string LeagueName, int RegionID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@LeagueID", Helper.CheckForNullValue(LeagueID)),
                    new System.Data.SqlClient.SqlParameter("@LeagueName", Helper.CheckForNullValue(LeagueName)),
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_LeagueSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_LeagueSave", arrSqlParameter)));
            }
        }
        
        public override void LeagueDelete(int LeagueID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LeagueID", Helper.CheckForNullValue(LeagueID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_LeagueDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_LeagueDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader LeagueGet(int LeagueID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LeagueID", Helper.CheckForNullValue(LeagueID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LeagueGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LeagueGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader LeagueGetAllBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LeagueGetAllBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LeagueGetAllBySystemUserID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader LeagueGetAllCurrentSeasonBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LeagueGetAllCurrentSeasonBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LeagueGetAllCurrentSeasonBySystemUserID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader LeagueGetBySeasonID(int SeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LeagueGetBySeasonID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LeagueGetBySeasonID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region LocationManager methods 
        public override int LocationSave(string Address, string City, int CreatedByUserID, System.DateTime CreatedDate, decimal Latitude, int LocationID, decimal Longitude, int ModifiedByUserID, System.DateTime ModifiedDate, string Name, string PostalCode, int RegionID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Address", Helper.CheckForNullValue(Address)),
                    new System.Data.SqlClient.SqlParameter("@City", Helper.CheckForNullValue(City)),
                    new System.Data.SqlClient.SqlParameter("@CreatedByUserID", Helper.CheckForNullValue(CreatedByUserID)),
                    new System.Data.SqlClient.SqlParameter("@CreatedDate", Helper.CheckForNullValue(CreatedDate)),
                    new System.Data.SqlClient.SqlParameter("@Latitude", Helper.CheckForNullValue(Latitude)),
                    new System.Data.SqlClient.SqlParameter("@LocationID", Helper.CheckForNullValue(LocationID)),
                    new System.Data.SqlClient.SqlParameter("@Longitude", Helper.CheckForNullValue(Longitude)),
                    new System.Data.SqlClient.SqlParameter("@ModifiedByUserID", Helper.CheckForNullValue(ModifiedByUserID)),
                    new System.Data.SqlClient.SqlParameter("@ModifiedDate", Helper.CheckForNullValue(ModifiedDate)),
                    new System.Data.SqlClient.SqlParameter("@Name", Helper.CheckForNullValue(Name)),
                    new System.Data.SqlClient.SqlParameter("@PostalCode", Helper.CheckForNullValue(PostalCode)),
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_LocationSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_LocationSave", arrSqlParameter)));
            }
        }
        
        public override void LocationDelete(int LocationID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LocationID", Helper.CheckForNullValue(LocationID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_LocationDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_LocationDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader LocationGet(int LocationID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LocationID", Helper.CheckForNullValue(LocationID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LocationGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LocationGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader LocationGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LocationGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LocationGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader LocationGetBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LocationGetBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LocationGetBySwimMeetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader LocationGetAllByRegionID(int RegionID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LocationGetAllByRegionID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LocationGetAllByRegionID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader LocationGetAllByCityRegionID(string City, int RegionID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@City", Helper.CheckForNullValue(City)),
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LocationGetAllByCityRegionID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LocationGetAllByCityRegionID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader LocationGetAllBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_LocationGetAllBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_LocationGetAllBySystemUserID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region PoolConfigManager methods 
        public override int PoolConfigSave(int CreatedByUserID, System.DateTime CreatedDate, string Description, int LaneCount, double LaneLength, int ModifiedByUserID, System.DateTime ModifiedDate, int PoolConfigID, int PoolID, int UOMID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@CreatedByUserID", Helper.CheckForNullValue(CreatedByUserID)),
                    new System.Data.SqlClient.SqlParameter("@CreatedDate", Helper.CheckForNullValue(CreatedDate)),
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@LaneCount", Helper.CheckForNullValue(LaneCount)),
                    new System.Data.SqlClient.SqlParameter("@LaneLength", Helper.CheckForNullValue(LaneLength)),
                    new System.Data.SqlClient.SqlParameter("@ModifiedByUserID", Helper.CheckForNullValue(ModifiedByUserID)),
                    new System.Data.SqlClient.SqlParameter("@ModifiedDate", Helper.CheckForNullValue(ModifiedDate)),
                    new System.Data.SqlClient.SqlParameter("@PoolConfigID", Helper.CheckForNullValue(PoolConfigID)),
                    new System.Data.SqlClient.SqlParameter("@PoolID", Helper.CheckForNullValue(PoolID)),
                    new System.Data.SqlClient.SqlParameter("@UOMID", Helper.CheckForNullValue(UOMID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_PoolConfigSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_PoolConfigSave", arrSqlParameter)));
            }
        }
        
        public override void PoolConfigDelete(int PoolConfigID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@PoolConfigID", Helper.CheckForNullValue(PoolConfigID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_PoolConfigDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_PoolConfigDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader PoolConfigGet(int PoolConfigID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@PoolConfigID", Helper.CheckForNullValue(PoolConfigID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetAllBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetAllBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetAllBySwimMeetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetByHeatID(int HeatID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetByHeatID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetByHeatID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetByHeatSheetID(int HeatSheetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetByHeatSheetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetByHeatSheetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetByHeatSheetEventID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetAllByLocationIDList(string LocationIDList)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LocationIDList", Helper.CheckForNullValue(LocationIDList))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetAllByLocationIDList", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetAllByLocationIDList", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetAllByLocationID(int LocationID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LocationID", Helper.CheckForNullValue(LocationID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetAllByLocationID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetAllByLocationID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetAllByCityRegionID(string City, int RegionID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@City", Helper.CheckForNullValue(City)),
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetAllByCityRegionID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetAllByCityRegionID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetAllByRegionID(int RegionID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetAllByRegionID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetAllByRegionID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetAllByUserTeamID(int UserTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserTeamID", Helper.CheckForNullValue(UserTeamID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetAllByUserTeamID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetAllByUserTeamID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolConfigGetByUserTeamID(int UserTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserTeamID", Helper.CheckForNullValue(UserTeamID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolConfigGetByUserTeamID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolConfigGetByUserTeamID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region PoolManager methods 
        public override int PoolSave(int CreatedByUserID, System.DateTime CreatedDate, string Description, int LocationID, int ModifiedByUserID, System.DateTime ModifiedDate, int PoolID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@CreatedByUserID", Helper.CheckForNullValue(CreatedByUserID)),
                    new System.Data.SqlClient.SqlParameter("@CreatedDate", Helper.CheckForNullValue(CreatedDate)),
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@LocationID", Helper.CheckForNullValue(LocationID)),
                    new System.Data.SqlClient.SqlParameter("@ModifiedByUserID", Helper.CheckForNullValue(ModifiedByUserID)),
                    new System.Data.SqlClient.SqlParameter("@ModifiedDate", Helper.CheckForNullValue(ModifiedDate)),
                    new System.Data.SqlClient.SqlParameter("@PoolID", Helper.CheckForNullValue(PoolID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_PoolSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_PoolSave", arrSqlParameter)));
            }
        }
        
        public override void PoolDelete(int PoolID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@PoolID", Helper.CheckForNullValue(PoolID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_PoolDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_PoolDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader PoolGet(int PoolID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@PoolID", Helper.CheckForNullValue(PoolID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolGetAllBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolGetAllBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolGetAllBySwimMeetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader PoolGetByPoolConfigID(int PoolConfigID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@PoolConfigID", Helper.CheckForNullValue(PoolConfigID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_PoolGetByPoolConfigID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_PoolGetByPoolConfigID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region ProfileManager methods 
        public override int ProfileSave(string Description, bool IsActive, int ProfileID, string ProfileName)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@IsActive", Helper.CheckForNullValue(IsActive)),
                    new System.Data.SqlClient.SqlParameter("@ProfileID", Helper.CheckForNullValue(ProfileID)),
                    new System.Data.SqlClient.SqlParameter("@ProfileName", Helper.CheckForNullValue(ProfileName))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_ProfileSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_ProfileSave", arrSqlParameter)));
            }
        }
        
        public override void ProfileDelete(int ProfileID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ProfileID", Helper.CheckForNullValue(ProfileID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_ProfileDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_ProfileDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader ProfileGet(int ProfileID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ProfileID", Helper.CheckForNullValue(ProfileID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ProfileGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ProfileGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ProfileGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ProfileGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ProfileGetAll", arrSqlParameter)));
            }
        }
        #endregion
        
        #region ProfileSystemUserManager methods 
        public override int ProfileSystemUserSave(int ProfileID, int ProfileSystemUserID, int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ProfileID", Helper.CheckForNullValue(ProfileID)),
                    new System.Data.SqlClient.SqlParameter("@ProfileSystemUserID", Helper.CheckForNullValue(ProfileSystemUserID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_ProfileSystemUserSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_ProfileSystemUserSave", arrSqlParameter)));
            }
        }
        
        public override void ProfileSystemUserDelete(int ProfileSystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ProfileSystemUserID", Helper.CheckForNullValue(ProfileSystemUserID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_ProfileSystemUserDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_ProfileSystemUserDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader ProfileSystemUserGet(int ProfileSystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ProfileSystemUserID", Helper.CheckForNullValue(ProfileSystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ProfileSystemUserGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ProfileSystemUserGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ProfileSystemUserGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ProfileSystemUserGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ProfileSystemUserGetAll", arrSqlParameter)));
            }
        }
        #endregion
        
        #region RegionManager methods 
        public override int RegionSave(string RegionAbbrev, int RegionID, string RegionName)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RegionAbbrev", Helper.CheckForNullValue(RegionAbbrev)),
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID)),
                    new System.Data.SqlClient.SqlParameter("@RegionName", Helper.CheckForNullValue(RegionName))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_RegionSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_RegionSave", arrSqlParameter)));
            }
        }
        
        public override void RegionDelete(int RegionID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_RegionDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_RegionDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader RegionGet(int RegionID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_RegionGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_RegionGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader RegionGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_RegionGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_RegionGetAll", arrSqlParameter)));
            }
        }
        #endregion
        
        #region ReportManager methods 
        public override System.Data.IDataReader RptHeatSheetEventGetByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_RptHeatSheetEventGetByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_RptHeatSheetEventGetByHeatSheetEventID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader RptHeatSheetEventGetByHeatID(int HeatID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_RptHeatSheetEventGetByHeatID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_RptHeatSheetEventGetByHeatID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader RptHeatSheetEventGetByHeatSheetID(int HeatSheetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetID", Helper.CheckForNullValue(HeatSheetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_RptHeatSheetEventGetByHeatSheetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_RptHeatSheetEventGetByHeatSheetID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region ResultManager methods 
        public override int ResultSave(
                    int AgeClassID, 
                    int CreatedByUserID, 
                    System.DateTime CreatedDate, 
                    bool Disqualified, 
                    int Distance, 
                    double ElapsedTime, 
                    System.DateTime EventDate, 
                    int HeatSwimmerID, 
                    bool IsCertified, 
                    bool IsProtested, 
                    double LaneLength, 
                    int ModifiedByUserID, 
                    System.DateTime ModifiedDate, 
                    int Place, 
                    double Points, 
                    int ResultID, 
                    int ScoringSchemeID, 
                    double Split, 
                    int StrokeID, 
                    int SwimmerID, 
                    int SwimmerTeamSeasonID, 
                    int TeamSeasonID, 
                    int UOMID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@AgeClassID", Helper.CheckForNullValue(AgeClassID)),
                    new System.Data.SqlClient.SqlParameter("@CreatedByUserID", Helper.CheckForNullValue(CreatedByUserID)),
                    new System.Data.SqlClient.SqlParameter("@CreatedDate", Helper.CheckForNullValue(CreatedDate)),
                    new System.Data.SqlClient.SqlParameter("@Disqualified", Helper.CheckForNullValue(Disqualified)),
                    new System.Data.SqlClient.SqlParameter("@Distance", Helper.CheckForNullValue(Distance)),
                    new System.Data.SqlClient.SqlParameter("@ElapsedTime", Helper.CheckForNullValue(ElapsedTime)),
                    new System.Data.SqlClient.SqlParameter("@EventDate", Helper.CheckForNullValue(EventDate)),
                    new System.Data.SqlClient.SqlParameter("@HeatSwimmerID", Helper.CheckForNullValue(HeatSwimmerID)),
                    new System.Data.SqlClient.SqlParameter("@IsCertified", Helper.CheckForNullValue(IsCertified)),
                    new System.Data.SqlClient.SqlParameter("@IsProtested", Helper.CheckForNullValue(IsProtested)),
                    new System.Data.SqlClient.SqlParameter("@LaneLength", Helper.CheckForNullValue(LaneLength)),
                    new System.Data.SqlClient.SqlParameter("@ModifiedByUserID", Helper.CheckForNullValue(ModifiedByUserID)),
                    new System.Data.SqlClient.SqlParameter("@ModifiedDate", Helper.CheckForNullValue(ModifiedDate)),
                    new System.Data.SqlClient.SqlParameter("@Place", Helper.CheckForNullValue(Place)),
                    new System.Data.SqlClient.SqlParameter("@Points", Helper.CheckForNullValue(Points)),
                    new System.Data.SqlClient.SqlParameter("@ResultID", Helper.CheckForNullValue(ResultID)),
                    new System.Data.SqlClient.SqlParameter("@ScoringSchemeID", Helper.CheckForNullValue(ScoringSchemeID)),
                    new System.Data.SqlClient.SqlParameter("@Split", Helper.CheckForNullValue(Split)),
                    new System.Data.SqlClient.SqlParameter("@StrokeID", Helper.CheckForNullValue(StrokeID)),
                    new System.Data.SqlClient.SqlParameter("@SwimmerID", Helper.CheckForNullValue(SwimmerID)),
                    new System.Data.SqlClient.SqlParameter("@SwimmerTeamSeasonID", Helper.CheckForNullValue(SwimmerTeamSeasonID)),
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID)),
                    new System.Data.SqlClient.SqlParameter("@UOMID", Helper.CheckForNullValue(UOMID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_ResultSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_ResultSave", arrSqlParameter)));
            }
        }
        
        public override void ResultDelete(int ResultID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ResultID", Helper.CheckForNullValue(ResultID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_ResultDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_ResultDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader ResultGet(int ResultID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ResultID", Helper.CheckForNullValue(ResultID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ResultGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ResultGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ResultGetAllBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ResultGetAllBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ResultGetAllBySwimMeetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ResultGetByHeatSwimmerID(int HeatSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSwimmerID", Helper.CheckForNullValue(HeatSwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ResultGetByHeatSwimmerID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ResultGetByHeatSwimmerID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ResultGetAllByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ResultGetAllByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ResultGetAllByHeatSheetEventID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ResultGetAllByHeatSheetEventIDSwimmerID(int HeatSheetEventID, int SwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID)),
                    new System.Data.SqlClient.SqlParameter("@SwimmerID", Helper.CheckForNullValue(SwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ResultGetAllByHeatSheetEventIDSwimmerID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ResultGetAllByHeatSheetEventIDSwimmerID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region RoleManager methods 
        public override int RoleSave(string Description, bool IsActive, int RoleID, string RoleName)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@IsActive", Helper.CheckForNullValue(IsActive)),
                    new System.Data.SqlClient.SqlParameter("@RoleID", Helper.CheckForNullValue(RoleID)),
                    new System.Data.SqlClient.SqlParameter("@RoleName", Helper.CheckForNullValue(RoleName))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_RoleSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_RoleSave", arrSqlParameter)));
            }
        }
        
        public override void RoleDelete(int RoleID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RoleID", Helper.CheckForNullValue(RoleID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_RoleDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_RoleDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader RoleGet(int RoleID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RoleID", Helper.CheckForNullValue(RoleID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_RoleGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_RoleGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader RoleGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_RoleGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_RoleGetAll", arrSqlParameter)));
            }
        }
        #endregion
        
        #region RoleSystemUserManager methods 
        public override int RoleSystemUserSave(int RoleID, int RoleSystemUserID, int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RoleID", Helper.CheckForNullValue(RoleID)),
                    new System.Data.SqlClient.SqlParameter("@RoleSystemUserID", Helper.CheckForNullValue(RoleSystemUserID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_RoleSystemUserSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_RoleSystemUserSave", arrSqlParameter)));
            }
        }
        
        public override void RoleSystemUserDelete(int RoleSystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RoleSystemUserID", Helper.CheckForNullValue(RoleSystemUserID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_RoleSystemUserDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_RoleSystemUserDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader RoleSystemUserGet(int RoleSystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RoleSystemUserID", Helper.CheckForNullValue(RoleSystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_RoleSystemUserGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_RoleSystemUserGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader RoleSystemUserGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_RoleSystemUserGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_RoleSystemUserGetAll", arrSqlParameter)));
            }
        }
        #endregion
        
        #region ScoreManager methods 
        public override System.Data.IDataReader ScoreGetAllBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ScoreGetAllBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ScoreGetAllBySwimMeetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ScoreGetAllBySwimmerIDSwimMeetID(int SwimmerID, int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimmerID", Helper.CheckForNullValue(SwimmerID)),
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ScoreGetAllBySwimmerIDSwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ScoreGetAllBySwimmerIDSwimMeetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ScoreGetTotalBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ScoreGetTotalBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ScoreGetTotalBySwimMeetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ScoreGetAllBySystemUserIDAsSwimmer(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ScoreGetAllBySystemUserIDAsSwimmer", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ScoreGetAllBySystemUserIDAsSwimmer", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ScoreGetAllBySwimMeetIDSystemUserID(int SwimMeetID, int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ScoreGetAllBySwimMeetIDSystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ScoreGetAllBySwimMeetIDSystemUserID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region ScoringSchemeManager methods 
        public override int ScoringSchemeSave(string Description, string IndividualPoints, bool IsUSASwimming, int LaneCount, string RelayPoints, int ScoringEventTypeID, int ScoringSchemeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@IndividualPoints", Helper.CheckForNullValue(IndividualPoints)),
                    new System.Data.SqlClient.SqlParameter("@IsUSASwimming", Helper.CheckForNullValue(IsUSASwimming)),
                    new System.Data.SqlClient.SqlParameter("@LaneCount", Helper.CheckForNullValue(LaneCount)),
                    new System.Data.SqlClient.SqlParameter("@RelayPoints", Helper.CheckForNullValue(RelayPoints)),
                    new System.Data.SqlClient.SqlParameter("@ScoringEventTypeID", Helper.CheckForNullValue(ScoringEventTypeID)),
                    new System.Data.SqlClient.SqlParameter("@ScoringSchemeID", Helper.CheckForNullValue(ScoringSchemeID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_ScoringSchemeSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_ScoringSchemeSave", arrSqlParameter)));
            }
        }
        
        public override void ScoringSchemeDelete(int ScoringSchemeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ScoringSchemeID", Helper.CheckForNullValue(ScoringSchemeID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_ScoringSchemeDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_ScoringSchemeDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader ScoringSchemeGet(int ScoringSchemeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ScoringSchemeID", Helper.CheckForNullValue(ScoringSchemeID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ScoringSchemeGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ScoringSchemeGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ScoringSchemeGetAllByUSASwimmingScoringEventTypeID(bool IsUSASwimming, int ScoringEventTypeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@IsUSASwimming", Helper.CheckForNullValue(IsUSASwimming)),
                    new System.Data.SqlClient.SqlParameter("@ScoringEventTypeID", Helper.CheckForNullValue(ScoringEventTypeID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ScoringSchemeGetAllByUSASwimmingScoringEventTypeID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ScoringSchemeGetAllByUSASwimmingScoringEventTypeID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ScoringSchemeGetAllBySeasonID(int SeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ScoringSchemeGetAllBySeasonID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ScoringSchemeGetAllBySeasonID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader ScoringSchemeGetAllByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_ScoringSchemeGetAllByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_ScoringSchemeGetAllByHeatSheetEventID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region SeasonManager methods 
        public override int SeasonSave(System.DateTime AgeClassRuleCustomDate, int AgeClassRuleID, string Description, System.DateTime EndDate, int LeagueID, int SeasonID, System.DateTime StartDate)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@AgeClassRuleCustomDate", Helper.CheckForNullValue(AgeClassRuleCustomDate)),
                    new System.Data.SqlClient.SqlParameter("@AgeClassRuleID", Helper.CheckForNullValue(AgeClassRuleID)),
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@EndDate", Helper.CheckForNullValue(EndDate)),
                    new System.Data.SqlClient.SqlParameter("@LeagueID", Helper.CheckForNullValue(LeagueID)),
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID)),
                    new System.Data.SqlClient.SqlParameter("@StartDate", Helper.CheckForNullValue(StartDate))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SeasonSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SeasonSave", arrSqlParameter)));
            }
        }
        
        public override void SeasonDelete(int SeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SeasonDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SeasonDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader SeasonGet(int SeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SeasonGetAllByTeamID(int TeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamID", Helper.CheckForNullValue(TeamID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonGetAllByTeamID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonGetAllByTeamID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SeasonGetByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonGetByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonGetByHeatSheetEventID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SeasonGetAllCurrentByLeagueID(int LeagueID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LeagueID", Helper.CheckForNullValue(LeagueID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonGetAllCurrentByLeagueID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonGetAllCurrentByLeagueID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SeasonGetByTeamSeasonID(int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonGetByTeamSeasonID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonGetByTeamSeasonID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SeasonGetAllBySearch(string LeagueName, int RegionID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LeagueName", Helper.CheckForNullValue(LeagueName)),
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonGetAllBySearch", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonGetAllBySearch", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SeasonGetAllByLeagueID(int LeagueID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LeagueID", Helper.CheckForNullValue(LeagueID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonGetAllByLeagueID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonGetAllByLeagueID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SeasonGetBySeasonIDSystemUserID(int SeasonID, int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonGetBySeasonIDSystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonGetBySeasonIDSystemUserID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SeasonGetAllByLeagueIDSystemUserID(int LeagueID, int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LeagueID", Helper.CheckForNullValue(LeagueID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonGetAllByLeagueIDSystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonGetAllByLeagueIDSystemUserID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region SeasonScoringSchemeManager methods 
        public override int SeasonScoringSchemeSave(int ScoringSchemeID, int SeasonID, int SeasonScoringSchemeID, int SwimMeetTypeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ScoringSchemeID", Helper.CheckForNullValue(ScoringSchemeID)),
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID)),
                    new System.Data.SqlClient.SqlParameter("@SeasonScoringSchemeID", Helper.CheckForNullValue(SeasonScoringSchemeID)),
                    new System.Data.SqlClient.SqlParameter("@SwimMeetTypeID", Helper.CheckForNullValue(SwimMeetTypeID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SeasonScoringSchemeSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SeasonScoringSchemeSave", arrSqlParameter)));
            }
        }
        
        public override void SeasonScoringSchemeDeleteBySeasonID(int SeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SeasonScoringSchemeDeleteBySeasonID", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SeasonScoringSchemeDeleteBySeasonID", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader SeasonScoringSchemeGet(int SeasonScoringSchemeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SeasonScoringSchemeID", Helper.CheckForNullValue(SeasonScoringSchemeID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonScoringSchemeGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonScoringSchemeGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SeasonScoringSchemeGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SeasonScoringSchemeGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SeasonScoringSchemeGetAll", arrSqlParameter)));
            }
        }
        #endregion
        
        #region SplitManager methods 
        public override int SplitSave(int ResultID, int SplitID, decimal SplitTime)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ResultID", Helper.CheckForNullValue(ResultID)),
                    new System.Data.SqlClient.SqlParameter("@SplitID", Helper.CheckForNullValue(SplitID)),
                    new System.Data.SqlClient.SqlParameter("@SplitTime", Helper.CheckForNullValue(SplitTime))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SplitSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SplitSave", arrSqlParameter)));
            }
        }
        
        public override void SplitDelete(int SplitID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SplitID", Helper.CheckForNullValue(SplitID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SplitDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SplitDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader SplitGet(int SplitID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SplitID", Helper.CheckForNullValue(SplitID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SplitGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SplitGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SplitGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SplitGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SplitGetAll", arrSqlParameter)));
            }
        }
        #endregion
        
        #region StrokeManager methods 
        public override int StrokeSave(string Description, bool IsRelay, int StrokeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@IsRelay", Helper.CheckForNullValue(IsRelay)),
                    new System.Data.SqlClient.SqlParameter("@StrokeID", Helper.CheckForNullValue(StrokeID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_StrokeSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_StrokeSave", arrSqlParameter)));
            }
        }
        
        public override void StrokeDelete(int StrokeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@StrokeID", Helper.CheckForNullValue(StrokeID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_StrokeDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_StrokeDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader StrokeGet(int StrokeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@StrokeID", Helper.CheckForNullValue(StrokeID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_StrokeGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_StrokeGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader StrokeGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_StrokeGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_StrokeGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader StrokeGetByHeatID(int HeatID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_StrokeGetByHeatID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_StrokeGetByHeatID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader StrokeGetByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_StrokeGetByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_StrokeGetByHeatSheetEventID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region SwimEventManager methods 
        public override int SwimEventSave(int AgeClassID, string Description, int StrokeID, int SwimEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@AgeClassID", Helper.CheckForNullValue(AgeClassID)),
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@StrokeID", Helper.CheckForNullValue(StrokeID)),
                    new System.Data.SqlClient.SqlParameter("@SwimEventID", Helper.CheckForNullValue(SwimEventID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SwimEventSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SwimEventSave", arrSqlParameter)));
            }
        }
        
        public override void SwimEventDelete(int SwimEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimEventID", Helper.CheckForNullValue(SwimEventID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SwimEventDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SwimEventDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader SwimEventGet(int SwimEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimEventID", Helper.CheckForNullValue(SwimEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimEventGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimEventGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimEventGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimEventGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimEventGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimEventGetByAgeClassIDStrokeID(int AgeClassID, int StrokeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@AgeClassID", Helper.CheckForNullValue(AgeClassID)),
                    new System.Data.SqlClient.SqlParameter("@StrokeID", Helper.CheckForNullValue(StrokeID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimEventGetByAgeClassIDStrokeID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimEventGetByAgeClassIDStrokeID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region SwimMeetManager methods 
        public override int SwimMeetSave(string Description, System.DateTime EndDate, int LocationID, int SeasonID, System.DateTime StartDate, int SwimMeetID, int SwimMeetTypeID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@EndDate", Helper.CheckForNullValue(EndDate)),
                    new System.Data.SqlClient.SqlParameter("@LocationID", Helper.CheckForNullValue(LocationID)),
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID)),
                    new System.Data.SqlClient.SqlParameter("@StartDate", Helper.CheckForNullValue(StartDate)),
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID)),
                    new System.Data.SqlClient.SqlParameter("@SwimMeetTypeID", Helper.CheckForNullValue(SwimMeetTypeID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SwimMeetSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SwimMeetSave", arrSqlParameter)));
            }
        }
        
        public override void SwimMeetDelete(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SwimMeetDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SwimMeetDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader SwimMeetGet(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimMeetGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimMeetGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimMeetGetAllBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimMeetGetAllBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimMeetGetAllBySwimMeetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimMeetGetByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimMeetGetByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimMeetGetByHeatSheetEventID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimMeetGetAllBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimMeetGetAllBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimMeetGetAllBySystemUserID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimMeetGetAllBySystemUserIDAsSwimmer(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimMeetGetAllBySystemUserIDAsSwimmer", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimMeetGetAllBySystemUserIDAsSwimmer", arrSqlParameter)));
            }
        }
        #endregion
        
        #region SwimMeetTeamManager methods 
        public override int SwimMeetTeamSave(bool IsHomeTeam, int SwimMeetID, int SwimMeetTeamID, int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@IsHomeTeam", Helper.CheckForNullValue(IsHomeTeam)),
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID)),
                    new System.Data.SqlClient.SqlParameter("@SwimMeetTeamID", Helper.CheckForNullValue(SwimMeetTeamID)),
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SwimMeetTeamSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SwimMeetTeamSave", arrSqlParameter)));
            }
        }
        
        public override void SwimMeetTeamDelete(int SwimMeetTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetTeamID", Helper.CheckForNullValue(SwimMeetTeamID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SwimMeetTeamDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SwimMeetTeamDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader SwimMeetTeamGet(int SwimMeetTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetTeamID", Helper.CheckForNullValue(SwimMeetTeamID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimMeetTeamGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimMeetTeamGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimMeetTeamGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimMeetTeamGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimMeetTeamGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimMeetTeamGetAllBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimMeetTeamGetAllBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimMeetTeamGetAllBySwimMeetID", arrSqlParameter)));
            }
        }
        
        public override void SwimMeetTeamDeleteBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SwimMeetTeamDeleteBySwimMeetID", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SwimMeetTeamDeleteBySwimMeetID", arrSqlParameter);
            }
        }
        #endregion
        
        #region SwimmerManager methods 
        public override int SwimmerSave(System.DateTime BirthDate, string FirstName, bool IsMale, string LastName, int SwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@BirthDate", Helper.CheckForNullValue(BirthDate)),
                    new System.Data.SqlClient.SqlParameter("@FirstName", Helper.CheckForNullValue(FirstName)),
                    new System.Data.SqlClient.SqlParameter("@IsMale", Helper.CheckForNullValue(IsMale)),
                    new System.Data.SqlClient.SqlParameter("@LastName", Helper.CheckForNullValue(LastName)),
                    new System.Data.SqlClient.SqlParameter("@SwimmerID", Helper.CheckForNullValue(SwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SwimmerSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SwimmerSave", arrSqlParameter)));
            }
        }
        
        public override void SwimmerDelete(int SwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimmerID", Helper.CheckForNullValue(SwimmerID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SwimmerDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SwimmerDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader SwimmerGet(int SwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimmerID", Helper.CheckForNullValue(SwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimmerGetAllBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerGetAllBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerGetAllBySystemUserID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimmerGetAllAvailableByHeatID(int HeatID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatID", Helper.CheckForNullValue(HeatID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerGetAllAvailableByHeatID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerGetAllAvailableByHeatID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimmerGetAllEligibleByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerGetAllEligibleByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerGetAllEligibleByHeatSheetEventID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimmerGetAllByTeamSeasonID(int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerGetAllByTeamSeasonID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerGetAllByTeamSeasonID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimmerTeamRequestGetAllByTeamSeasonID(int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerTeamRequestGetAllByTeamSeasonID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerTeamRequestGetAllByTeamSeasonID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimmerGetAllAvailableByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerGetAllAvailableByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerGetAllAvailableByHeatSheetEventID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimmerTeamRequestGetAllBySystemUserIDTeamSeasonID(int SystemUserID, int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID)),
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerTeamRequestGetAllBySystemUserIDTeamSeasonID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerTeamRequestGetAllBySystemUserIDTeamSeasonID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region SwimmerTeamRequestManager methods 
        public override int SwimmerTeamRequestSave(System.DateTime ApprovalDate, int ApprovalUserID, bool IsApproved, System.DateTime RequestDate, int SwimmerTeamRequestID, int TeamSeasonID, int UserSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ApprovalDate", Helper.CheckForNullValue(ApprovalDate)),
                    new System.Data.SqlClient.SqlParameter("@ApprovalUserID", Helper.CheckForNullValue(ApprovalUserID)),
                    new System.Data.SqlClient.SqlParameter("@IsApproved", Helper.CheckForNullValue(IsApproved)),
                    new System.Data.SqlClient.SqlParameter("@RequestDate", Helper.CheckForNullValue(RequestDate)),
                    new System.Data.SqlClient.SqlParameter("@SwimmerTeamRequestID", Helper.CheckForNullValue(SwimmerTeamRequestID)),
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID)),
                    new System.Data.SqlClient.SqlParameter("@UserSwimmerID", Helper.CheckForNullValue(UserSwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SwimmerTeamRequestSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SwimmerTeamRequestSave", arrSqlParameter)));
            }
        }
        
        public override void SwimmerTeamRequestDelete(int SwimmerTeamRequestID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimmerTeamRequestID", Helper.CheckForNullValue(SwimmerTeamRequestID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SwimmerTeamRequestDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SwimmerTeamRequestDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader SwimmerTeamRequestGet(int SwimmerTeamRequestID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimmerTeamRequestID", Helper.CheckForNullValue(SwimmerTeamRequestID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerTeamRequestGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerTeamRequestGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimmerTeamRequestGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerTeamRequestGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerTeamRequestGetAll", arrSqlParameter)));
            }
        }
        
        public override int SwimmerTeamRequestIsPermitted(int TeamSeasonID, int UserSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID)),
                    new System.Data.SqlClient.SqlParameter("@UserSwimmerID", Helper.CheckForNullValue(UserSwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SwimmerTeamRequestIsPermitted", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SwimmerTeamRequestIsPermitted", arrSqlParameter)));
            }
        }
        #endregion
        
        #region SwimmerTeamSeasonManager methods 
        public override int SwimmerTeamSeasonSave(System.DateTime EndDate, System.DateTime StartDate, int SwimmerID, int SwimmerTeamSeasonID, int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@EndDate", Helper.CheckForNullValue(EndDate)),
                    new System.Data.SqlClient.SqlParameter("@StartDate", Helper.CheckForNullValue(StartDate)),
                    new System.Data.SqlClient.SqlParameter("@SwimmerID", Helper.CheckForNullValue(SwimmerID)),
                    new System.Data.SqlClient.SqlParameter("@SwimmerTeamSeasonID", Helper.CheckForNullValue(SwimmerTeamSeasonID)),
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SwimmerTeamSeasonSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SwimmerTeamSeasonSave", arrSqlParameter)));
            }
        }
        
        public override void SwimmerTeamSeasonDelete(int SwimmerTeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimmerTeamSeasonID", Helper.CheckForNullValue(SwimmerTeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SwimmerTeamSeasonDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SwimmerTeamSeasonDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader SwimmerTeamSeasonGet(int SwimmerTeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimmerTeamSeasonID", Helper.CheckForNullValue(SwimmerTeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerTeamSeasonGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerTeamSeasonGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SwimmerTeamSeasonGetAllBySwimmerID(int SwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimmerID", Helper.CheckForNullValue(SwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SwimmerTeamSeasonGetAllBySwimmerID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SwimmerTeamSeasonGetAllBySwimmerID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region SystemUserManager methods 
        public override int SystemUserSave(string City, System.DateTime CreateDate, string Email, string FirstName, bool IsActive, string LastName, System.DateTime ModifiedDate, string Password, int RegionID, System.Guid RegistrationKey, bool ResetPassword, int SystemUserID, string TemporaryPassword, string UserName)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@City", Helper.CheckForNullValue(City)),
                    new System.Data.SqlClient.SqlParameter("@CreateDate", Helper.CheckForNullValue(CreateDate)),
                    new System.Data.SqlClient.SqlParameter("@Email", Helper.CheckForNullValue(Email)),
                    new System.Data.SqlClient.SqlParameter("@FirstName", Helper.CheckForNullValue(FirstName)),
                    new System.Data.SqlClient.SqlParameter("@IsActive", Helper.CheckForNullValue(IsActive)),
                    new System.Data.SqlClient.SqlParameter("@LastName", Helper.CheckForNullValue(LastName)),
                    new System.Data.SqlClient.SqlParameter("@ModifiedDate", Helper.CheckForNullValue(ModifiedDate)),
                    new System.Data.SqlClient.SqlParameter("@Password", Helper.CheckForNullValue(Password)),
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID)),
                    new System.Data.SqlClient.SqlParameter("@RegistrationKey", Helper.CheckForNullValue(RegistrationKey)),
                    new System.Data.SqlClient.SqlParameter("@ResetPassword", Helper.CheckForNullValue(ResetPassword)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID)),
                    new System.Data.SqlClient.SqlParameter("@TemporaryPassword", Helper.CheckForNullValue(TemporaryPassword)),
                    new System.Data.SqlClient.SqlParameter("@UserName", Helper.CheckForNullValue(UserName))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_SystemUserSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_SystemUserSave", arrSqlParameter)));
            }
        }
        
        public override void SystemUserDelete(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_SystemUserDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_SystemUserDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader SystemUserGet(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SystemUserGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SystemUserGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SystemUserGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SystemUserGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SystemUserGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SystemUserGetByUserNamePassword(string UserName, string Password)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserName", Helper.CheckForNullValue(UserName)),
                    new System.Data.SqlClient.SqlParameter("@Password", Helper.CheckForNullValue(Password))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SystemUserGetByUserNamePassword", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SystemUserGetByUserNamePassword", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SystemUserGetByEmail(string Email)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Email", Helper.CheckForNullValue(Email))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SystemUserGetByEmail", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SystemUserGetByEmail", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SystemUserGetByRegistrationKey(System.Guid RegistrationKey)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@RegistrationKey", Helper.CheckForNullValue(RegistrationKey))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SystemUserGetByRegistrationKey", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SystemUserGetByRegistrationKey", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SystemUserGetByUserName(string UserName)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserName", Helper.CheckForNullValue(UserName))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SystemUserGetByUserName", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SystemUserGetByUserName", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader SystemUserGetAllByResetPassword()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_SystemUserGetAllByResetPassword", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_SystemUserGetAllByResetPassword", arrSqlParameter)));
            }
        }
        #endregion
        
        #region TeamLeagueRequestManager methods 
        public override int TeamLeagueRequestSave(System.DateTime ApprovalDate, int ApprovalUserID, bool IsApproved, System.DateTime RequestDate, int SeasonID, int TeamLeagueRequestID, int UserTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@ApprovalDate", Helper.CheckForNullValue(ApprovalDate)),
                    new System.Data.SqlClient.SqlParameter("@ApprovalUserID", Helper.CheckForNullValue(ApprovalUserID)),
                    new System.Data.SqlClient.SqlParameter("@IsApproved", Helper.CheckForNullValue(IsApproved)),
                    new System.Data.SqlClient.SqlParameter("@RequestDate", Helper.CheckForNullValue(RequestDate)),
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID)),
                    new System.Data.SqlClient.SqlParameter("@TeamLeagueRequestID", Helper.CheckForNullValue(TeamLeagueRequestID)),
                    new System.Data.SqlClient.SqlParameter("@UserTeamID", Helper.CheckForNullValue(UserTeamID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_TeamLeagueRequestSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_TeamLeagueRequestSave", arrSqlParameter)));
            }
        }
        
        public override void TeamLeagueRequestDelete(int TeamLeagueRequestID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamLeagueRequestID", Helper.CheckForNullValue(TeamLeagueRequestID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_TeamLeagueRequestDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_TeamLeagueRequestDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader TeamLeagueRequestGet(int TeamLeagueRequestID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamLeagueRequestID", Helper.CheckForNullValue(TeamLeagueRequestID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamLeagueRequestGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamLeagueRequestGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamLeagueRequestGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamLeagueRequestGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamLeagueRequestGetAll", arrSqlParameter)));
            }
        }
        #endregion
        
        #region TeamManager methods 
        public override int TeamSave(string Abbrev, int HomePoolConfigID, int TeamID, string TeamName)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Abbrev", Helper.CheckForNullValue(Abbrev)),
                    new System.Data.SqlClient.SqlParameter("@HomePoolConfigID", Helper.CheckForNullValue(HomePoolConfigID)),
                    new System.Data.SqlClient.SqlParameter("@TeamID", Helper.CheckForNullValue(TeamID)),
                    new System.Data.SqlClient.SqlParameter("@TeamName", Helper.CheckForNullValue(TeamName))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_TeamSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_TeamSave", arrSqlParameter)));
            }
        }
        
        public override void TeamDelete(int TeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamID", Helper.CheckForNullValue(TeamID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_TeamDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_TeamDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader TeamGet(int TeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamID", Helper.CheckForNullValue(TeamID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamGetAllBySwimMeetID(int SwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamGetAllBySwimMeetID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamGetAllBySwimMeetID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamGetByHeatSwimmerID(int HeatSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSwimmerID", Helper.CheckForNullValue(HeatSwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamGetByHeatSwimmerID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamGetByHeatSwimmerID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamGetAllCurrentSeasonByLeagueID(int LeagueID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LeagueID", Helper.CheckForNullValue(LeagueID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamGetAllCurrentSeasonByLeagueID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamGetAllCurrentSeasonByLeagueID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamGetAllBySeasonID(int SeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamGetAllBySeasonID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamGetAllBySeasonID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamGetAllBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamGetAllBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamGetAllBySystemUserID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamGetAllBySearch(string Address, string City, string PostalCode, int RegionID, string TeamName)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Address", Helper.CheckForNullValue(Address)),
                    new System.Data.SqlClient.SqlParameter("@City", Helper.CheckForNullValue(City)),
                    new System.Data.SqlClient.SqlParameter("@PostalCode", Helper.CheckForNullValue(PostalCode)),
                    new System.Data.SqlClient.SqlParameter("@RegionID", Helper.CheckForNullValue(RegionID)),
                    new System.Data.SqlClient.SqlParameter("@TeamName", Helper.CheckForNullValue(TeamName))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamGetAllBySearch", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamGetAllBySearch", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamGetByUserTeamID(int UserTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserTeamID", Helper.CheckForNullValue(UserTeamID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamGetByUserTeamID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamGetByUserTeamID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamLeagueRequestGetAllBySeasonID(int SeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamLeagueRequestGetAllBySeasonID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamLeagueRequestGetAllBySeasonID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamGetByTeamSeasonID(int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamGetByTeamSeasonID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamGetByTeamSeasonID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamLeagueRequestGetAllBySeasonIDSystemUserID(int SeasonID, int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamLeagueRequestGetAllBySeasonIDSystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamLeagueRequestGetAllBySeasonIDSystemUserID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region TeamSeasonManager methods 
        public override int TeamSeasonSave(int AgeClassRuleID, int LeagueID, int SeasonID, int TeamID, int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@AgeClassRuleID", Helper.CheckForNullValue(AgeClassRuleID)),
                    new System.Data.SqlClient.SqlParameter("@LeagueID", Helper.CheckForNullValue(LeagueID)),
                    new System.Data.SqlClient.SqlParameter("@SeasonID", Helper.CheckForNullValue(SeasonID)),
                    new System.Data.SqlClient.SqlParameter("@TeamID", Helper.CheckForNullValue(TeamID)),
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_TeamSeasonSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_TeamSeasonSave", arrSqlParameter)));
            }
        }
        
        public override void TeamSeasonDelete(int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_TeamSeasonDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_TeamSeasonDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader TeamSeasonGet(int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamSeasonGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamSeasonGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamSeasonGetAllBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamSeasonGetAllBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamSeasonGetAllBySystemUserID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader TeamSeasonGetAllByHeatSheetEventID(int HeatSheetEventID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@HeatSheetEventID", Helper.CheckForNullValue(HeatSheetEventID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_TeamSeasonGetAllByHeatSheetEventID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_TeamSeasonGetAllByHeatSheetEventID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region UOMManager methods 
        public override int UOMSave(string Abbrev, string Description, int UOMID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@Abbrev", Helper.CheckForNullValue(Abbrev)),
                    new System.Data.SqlClient.SqlParameter("@Description", Helper.CheckForNullValue(Description)),
                    new System.Data.SqlClient.SqlParameter("@UOMID", Helper.CheckForNullValue(UOMID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_UOMSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_UOMSave", arrSqlParameter)));
            }
        }
        
        public override void UOMDelete(int UOMID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UOMID", Helper.CheckForNullValue(UOMID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_UOMDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_UOMDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader UOMGet(int UOMID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UOMID", Helper.CheckForNullValue(UOMID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UOMGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UOMGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader UOMGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UOMGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UOMGetAll", arrSqlParameter)));
            }
        }
        #endregion
        
        #region UserLeagueManager methods 
        public override int UserLeagueSave(int LeagueID, int SystemUserID, int UserLeagueID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LeagueID", Helper.CheckForNullValue(LeagueID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID)),
                    new System.Data.SqlClient.SqlParameter("@UserLeagueID", Helper.CheckForNullValue(UserLeagueID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_UserLeagueSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_UserLeagueSave", arrSqlParameter)));
            }
        }
        
        public override void UserLeagueDelete(int UserLeagueID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserLeagueID", Helper.CheckForNullValue(UserLeagueID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_UserLeagueDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_UserLeagueDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader UserLeagueGet(int UserLeagueID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserLeagueID", Helper.CheckForNullValue(UserLeagueID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserLeagueGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserLeagueGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader UserLeagueGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserLeagueGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserLeagueGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader UserLeagueGetAllBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserLeagueGetAllBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserLeagueGetAllBySystemUserID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region UserLocationManager methods 
        public override int UserLocationSave(int LocationID, int SystemUserID, int UserLocationID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@LocationID", Helper.CheckForNullValue(LocationID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID)),
                    new System.Data.SqlClient.SqlParameter("@UserLocationID", Helper.CheckForNullValue(UserLocationID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_UserLocationSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_UserLocationSave", arrSqlParameter)));
            }
        }
        
        public override void UserLocationDelete(int UserLocationID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserLocationID", Helper.CheckForNullValue(UserLocationID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_UserLocationDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_UserLocationDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader UserLocationGet(int UserLocationID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserLocationID", Helper.CheckForNullValue(UserLocationID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserLocationGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserLocationGet", arrSqlParameter)));
            }
        }
        #endregion
        
        #region UserSwimMeetManager methods 
        public override int UserSwimMeetSave(int SwimMeetID, int SystemUserID, int UserSwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimMeetID", Helper.CheckForNullValue(SwimMeetID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID)),
                    new System.Data.SqlClient.SqlParameter("@UserSwimMeetID", Helper.CheckForNullValue(UserSwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_UserSwimMeetSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_UserSwimMeetSave", arrSqlParameter)));
            }
        }
        
        public override void UserSwimMeetDelete(int UserSwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserSwimMeetID", Helper.CheckForNullValue(UserSwimMeetID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_UserSwimMeetDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_UserSwimMeetDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader UserSwimMeetGet(int UserSwimMeetID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserSwimMeetID", Helper.CheckForNullValue(UserSwimMeetID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserSwimMeetGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserSwimMeetGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader UserSwimMeetGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserSwimMeetGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserSwimMeetGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader UserSwimMeetGetAllBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserSwimMeetGetAllBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserSwimMeetGetAllBySystemUserID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region UserSwimmerManager methods 
        public override int UserSwimmerSave(int SwimmerID, int SystemUserID, int UserSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SwimmerID", Helper.CheckForNullValue(SwimmerID)),
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID)),
                    new System.Data.SqlClient.SqlParameter("@UserSwimmerID", Helper.CheckForNullValue(UserSwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_UserSwimmerSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_UserSwimmerSave", arrSqlParameter)));
            }
        }
        
        public override void UserSwimmerDelete(int UserSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserSwimmerID", Helper.CheckForNullValue(UserSwimmerID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_UserSwimmerDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_UserSwimmerDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader UserSwimmerGet(int UserSwimmerID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserSwimmerID", Helper.CheckForNullValue(UserSwimmerID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserSwimmerGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserSwimmerGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader UserSwimmerGetAll()
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[0];
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserSwimmerGetAll", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserSwimmerGetAll", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader UserSwimmerGetAllBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserSwimmerGetAllBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserSwimmerGetAllBySystemUserID", arrSqlParameter)));
            }
        }
        #endregion
        
        #region UserTeamManager methods 
        public override int UserTeamSave(int SystemUserID, int TeamID, int UserTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID)),
                    new System.Data.SqlClient.SqlParameter("@TeamID", Helper.CheckForNullValue(TeamID)),
                    new System.Data.SqlClient.SqlParameter("@UserTeamID", Helper.CheckForNullValue(UserTeamID))};
            if ((_SqlTransaction == null))
            {
                return ((int)(SqlHelper.ExecuteScalar(ConnectionString, "usp_UserTeamSave", arrSqlParameter)));
            }
            else
            {
                return ((int)(SqlHelper.ExecuteScalar(_SqlTransaction, "usp_UserTeamSave", arrSqlParameter)));
            }
        }
        
        public override void UserTeamDelete(int UserTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserTeamID", Helper.CheckForNullValue(UserTeamID))};
            if ((_SqlTransaction == null))
            {
                SqlHelper.ExecuteNonQuery(ConnectionString, "usp_UserTeamDelete", arrSqlParameter);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(_SqlTransaction, "usp_UserTeamDelete", arrSqlParameter);
            }
        }
        
        public override System.Data.IDataReader UserTeamGet(int UserTeamID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@UserTeamID", Helper.CheckForNullValue(UserTeamID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserTeamGet", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserTeamGet", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader UserTeamGetAllByTeamSeasonID(int TeamSeasonID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@TeamSeasonID", Helper.CheckForNullValue(TeamSeasonID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserTeamGetAllByTeamSeasonID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserTeamGetAllByTeamSeasonID", arrSqlParameter)));
            }
        }
        
        public override System.Data.IDataReader UserTeamGetAllBySystemUserID(int SystemUserID)
        {
            System.Data.SqlClient.SqlParameter[] arrSqlParameter = new System.Data.SqlClient.SqlParameter[] {
                    new System.Data.SqlClient.SqlParameter("@SystemUserID", Helper.CheckForNullValue(SystemUserID))};
            if ((_SqlTransaction == null))
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(ConnectionString, "usp_UserTeamGetAllBySystemUserID", arrSqlParameter)));
            }
            else
            {
                return ((System.Data.IDataReader)(SqlHelper.ExecuteReader(_SqlTransaction, "usp_UserTeamGetAllBySystemUserID", arrSqlParameter)));
            }
        }
        #endregion

	// *** START OF CUSTOM CODE - CODE ABOVE THIS COMMENT WILL BE OVERWRITTEN! ***
    }
}
