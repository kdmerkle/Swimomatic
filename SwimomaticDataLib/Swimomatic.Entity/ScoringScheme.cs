using System.Collections.Generic;

namespace Swimomatic.Entity
{


    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The ScoringScheme class is the concrete class representing a single ScoringScheme object.
    // This class is where any customizations can be made.
    // </summary>
    // <history>
    // 		[Generated on 01/10/2011] - Generated by LAAF CodeGen
    // </history>
    [System.Serializable()]
    public class ScoringScheme : _ScoringScheme
    {
        #region  Constructor
        public ScoringScheme()
        {
        }
        #endregion

        #region Custom Properties
        public int SwimMeetTypeID { get; set; }
        private List<int> _IndividualPointsList;
        public List<int> IndividualPointsList
        {
            get
            {
                if (_IndividualPointsList == null)
                {
                    _IndividualPointsList = new List<int>();
                }

                if (_IndividualPointsList.Count == 0)
                {
                    string[] arrIndividualPointss = this.IndividualPoints.Split(',');
                    for (int i = 0; i < arrIndividualPointss.Length; i++)
                    {
                        _IndividualPointsList.Add(int.Parse(arrIndividualPointss[i]));
                    }
                }
                return _IndividualPointsList;
            }
            //set
            //{
            //    string retVal = string.Empty;
            //    foreach (int item in value)
            //    {
            //        retVal += item.ToString() + ",";
            //    }

            //    this.IndividualPoints = retVal;
            //}
        }
        private List<int> _RelayPointsList;
        public List<int> RelayPointsList
        {
            get
            {
                if (_RelayPointsList == null)
                {
                    _RelayPointsList = new List<int>();
                }

                if (_RelayPointsList.Count == 0)
                {
                    string[] arrRelayPointss = this.RelayPoints.Split(',');
                    for (int i = 0; i < arrRelayPointss.Length; i++)
                    {
                        _RelayPointsList.Add(int.Parse(arrRelayPointss[i]));
                    }
                }
                return _RelayPointsList;
            }
            //set
            //{
            //    string retVal = string.Empty;
            //    foreach (int item in value)
            //    {
            //        retVal += item.ToString() + ",";
            //    }

            //    this.RelayPoints = retVal;
            //}
        }
        #endregion

        #region Methods

        /// <summary>
        /// Returns the sum of points for a given place based on the number of finishers
        /// Example: if there were 3 finishers that tied for second place, it returns the sum of the points for 2nd, 3rd and 4th place 
        /// Place is a zero-index number, so for 1st place,  Place = 0
        /// </summary>
        /// <param name="Place">The place (zero based ordinal) the Swimmer(s) tied for [1st = 0, 2nd = 1, etc.]</param>
        /// <param name="Finishers">Number of Swimmers Tied for the given Place</param>
        /// <param name="IsRelay"></param>
        /// <returns></returns>
        public double GetPointsPerPlace(int Place, int Finishers, bool IsRelay)
        {
            double returnValue = 0.0;
            if (Finishers > 0) //if there are no finishers, there are no points
            {
                int limit = 0;
                if (IsRelay)
                {
                    limit = System.Math.Min(this.RelayPointsList.Count, Place + Finishers); //limit the number of iterations to the lesser of Place + Finishers and PointsList count
                    for (int i = Place; i < limit; i++)
                    {
                        returnValue += this.RelayPointsList[i]; //sum the values
                    }
                }
                else
                {
                    limit = System.Math.Min(this.IndividualPointsList.Count, Place + Finishers);//limit the number of iterations to the lesser of Place + Finishers and PointsList count
                    for (int i = Place; i < limit; i++)
                    {
                        returnValue += this.IndividualPointsList[i]; //sum the values
                    }
                }
            }
            return returnValue;
        }

        #endregion
    }
}
