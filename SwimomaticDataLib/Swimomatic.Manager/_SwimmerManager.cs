namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _SwimmerManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 05/14/2011] - Generated by LAAF CodeGen
    // </history>
    public class _SwimmerManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _SwimmerManager()
        {
        }
        
        public _SwimmerManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int SwimmerSave(Swimomatic.Entity.Swimmer Swimmer)
        {
            return ((int)(ServiceProvider.SwimmerSave(Swimmer.BirthDate, Swimmer.FirstName, Swimmer.IsMale, Swimmer.LastName, Swimmer.SwimmerID)));
        }
        
        public virtual void SwimmerDelete(int SwimmerID)
        {
            ServiceProvider.SwimmerDelete(SwimmerID);
        }
        
        public virtual Swimomatic.Entity.Swimmer SwimmerGet(int SwimmerID)
        {
            return ((Swimomatic.Entity.Swimmer)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Swimmer(), ServiceProvider.SwimmerGet(SwimmerID))));
        }
        
        public virtual Swimomatic.Entity.SwimmerCollection SwimmerGetAllBySystemUserID(int SystemUserID)
        {
            return ((Swimomatic.Entity.SwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Swimmer), typeof(Swimomatic.Entity.SwimmerCollection), ServiceProvider.SwimmerGetAllBySystemUserID(SystemUserID))));
        }
        
        public virtual Swimomatic.Entity.SwimmerCollection SwimmerGetAllAvailableByHeatID(int HeatID)
        {
            return ((Swimomatic.Entity.SwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Swimmer), typeof(Swimomatic.Entity.SwimmerCollection), ServiceProvider.SwimmerGetAllAvailableByHeatID(HeatID))));
        }
        
        public virtual Swimomatic.Entity.SwimmerCollection SwimmerGetAllEligibleByHeatSheetEventID(int HeatSheetEventID)
        {
            return ((Swimomatic.Entity.SwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Swimmer), typeof(Swimomatic.Entity.SwimmerCollection), ServiceProvider.SwimmerGetAllEligibleByHeatSheetEventID(HeatSheetEventID))));
        }
        
        public virtual Swimomatic.Entity.SwimmerCollection SwimmerGetAllByTeamSeasonID(int TeamSeasonID)
        {
            return ((Swimomatic.Entity.SwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Swimmer), typeof(Swimomatic.Entity.SwimmerCollection), ServiceProvider.SwimmerGetAllByTeamSeasonID(TeamSeasonID))));
        }
        
        public virtual Swimomatic.Entity.SwimmerCollection SwimmerTeamRequestGetAllByTeamSeasonID(int TeamSeasonID)
        {
            return ((Swimomatic.Entity.SwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Swimmer), typeof(Swimomatic.Entity.SwimmerCollection), ServiceProvider.SwimmerTeamRequestGetAllByTeamSeasonID(TeamSeasonID))));
        }
        
        public virtual Swimomatic.Entity.SwimmerCollection SwimmerGetAllAvailableByHeatSheetEventID(int HeatSheetEventID)
        {
            return ((Swimomatic.Entity.SwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Swimmer), typeof(Swimomatic.Entity.SwimmerCollection), ServiceProvider.SwimmerGetAllAvailableByHeatSheetEventID(HeatSheetEventID))));
        }
        
        public virtual Swimomatic.Entity.SwimmerCollection SwimmerTeamRequestGetAllBySystemUserIDTeamSeasonID(int SystemUserID, int TeamSeasonID)
        {
            return ((Swimomatic.Entity.SwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Swimmer), typeof(Swimomatic.Entity.SwimmerCollection), ServiceProvider.SwimmerTeamRequestGetAllBySystemUserIDTeamSeasonID(SystemUserID, TeamSeasonID))));
        }
    }
}
