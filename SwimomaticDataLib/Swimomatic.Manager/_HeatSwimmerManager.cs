namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _HeatSwimmerManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 02/29/2012] - Generated by LAAF CodeGen
    // </history>
    public class _HeatSwimmerManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _HeatSwimmerManager()
        {
        }
        
        public _HeatSwimmerManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int HeatSwimmerSave(Swimomatic.Entity.HeatSwimmer HeatSwimmer)
        {
            return ((int)(ServiceProvider.HeatSwimmerSave(HeatSwimmer.HeatID, HeatSwimmer.HeatSwimmerID, HeatSwimmer.LaneNumber, HeatSwimmer.Leg, HeatSwimmer.SeedResultID, HeatSwimmer.SwimmerTeamSeasonID)));
        }
        
        public virtual void HeatSwimmerDelete(int HeatSwimmerID)
        {
            ServiceProvider.HeatSwimmerDelete(HeatSwimmerID);
        }
        
        public virtual Swimomatic.Entity.HeatSwimmer HeatSwimmerGet(int HeatSwimmerID)
        {
            return ((Swimomatic.Entity.HeatSwimmer)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.HeatSwimmer(), ServiceProvider.HeatSwimmerGet(HeatSwimmerID))));
        }
        
        public virtual Swimomatic.Entity.HeatSwimmerCollection HeatSwimmerGetAll()
        {
            return ((Swimomatic.Entity.HeatSwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.HeatSwimmer), typeof(Swimomatic.Entity.HeatSwimmerCollection), ServiceProvider.HeatSwimmerGetAll())));
        }
        
        public virtual Swimomatic.Entity.HeatSwimmerCollection HeatSwimmerGetAllBySwimMeetID(int SwimMeetID)
        {
            return ((Swimomatic.Entity.HeatSwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.HeatSwimmer), typeof(Swimomatic.Entity.HeatSwimmerCollection), ServiceProvider.HeatSwimmerGetAllBySwimMeetID(SwimMeetID))));
        }
        
        public virtual Swimomatic.Entity.HeatSwimmer HeatSwimmerGetByLaneNumberHeatID(int LaneNumber, int HeatID)
        {
            return ((Swimomatic.Entity.HeatSwimmer)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.HeatSwimmer(), ServiceProvider.HeatSwimmerGetByLaneNumberHeatID(LaneNumber, HeatID))));
        }
        
        public virtual Swimomatic.Entity.HeatSwimmerCollection HeatSwimmerGetAllByHeatID(int HeatID)
        {
            return ((Swimomatic.Entity.HeatSwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.HeatSwimmer), typeof(Swimomatic.Entity.HeatSwimmerCollection), ServiceProvider.HeatSwimmerGetAllByHeatID(HeatID))));
        }
        
        public virtual void HeatSwimmerDeleteByHeatID(int HeatID)
        {
            ServiceProvider.HeatSwimmerDeleteByHeatID(HeatID);
        }
        
        public virtual void HeatSwimmerDeleteByHeatSheetEventID(int HeatSheetEventID)
        {
            ServiceProvider.HeatSwimmerDeleteByHeatSheetEventID(HeatSheetEventID);
        }
        
        public virtual Swimomatic.Entity.HeatSwimmerCollection HeatSwimmerGetAllByHeatIDLaneNumber(int HeatID, int LaneNumber)
        {
            return ((Swimomatic.Entity.HeatSwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.HeatSwimmer), typeof(Swimomatic.Entity.HeatSwimmerCollection), ServiceProvider.HeatSwimmerGetAllByHeatIDLaneNumber(HeatID, LaneNumber))));
        }
        
        public virtual Swimomatic.Entity.HeatSwimmerCollection HeatSwimmerGetAllByHeatSheetEventID(int HeatSheetEventID)
        {
            return ((Swimomatic.Entity.HeatSwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.HeatSwimmer), typeof(Swimomatic.Entity.HeatSwimmerCollection), ServiceProvider.HeatSwimmerGetAllByHeatSheetEventID(HeatSheetEventID))));
        }
        
        public virtual Swimomatic.Entity.HeatSwimmerCollection HeatSwimmerGetAllRelayTeammatesByHeatSwimmerID(int HeatSwimmerID)
        {
            return ((Swimomatic.Entity.HeatSwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.HeatSwimmer), typeof(Swimomatic.Entity.HeatSwimmerCollection), ServiceProvider.HeatSwimmerGetAllRelayTeammatesByHeatSwimmerID(HeatSwimmerID))));
        }
        
        public virtual Swimomatic.Entity.HeatSwimmerCollection HeatSwimmerGetAllByHeatSheetID(int HeatSheetID)
        {
            return ((Swimomatic.Entity.HeatSwimmerCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.HeatSwimmer), typeof(Swimomatic.Entity.HeatSwimmerCollection), ServiceProvider.HeatSwimmerGetAllByHeatSheetID(HeatSheetID))));
        }
    }
}
