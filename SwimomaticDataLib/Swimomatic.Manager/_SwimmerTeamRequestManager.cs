namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _SwimmerTeamRequestManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 12/08/2010] - Generated by LAAF CodeGen
    // </history>
    public class _SwimmerTeamRequestManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _SwimmerTeamRequestManager()
        {
        }
        
        public _SwimmerTeamRequestManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int SwimmerTeamRequestSave(Swimomatic.Entity.SwimmerTeamRequest SwimmerTeamRequest)
        {
            return ((int)(ServiceProvider.SwimmerTeamRequestSave(SwimmerTeamRequest.ApprovalDate, SwimmerTeamRequest.ApprovalUserID, SwimmerTeamRequest.IsApproved, SwimmerTeamRequest.RequestDate, SwimmerTeamRequest.SwimmerTeamRequestID, SwimmerTeamRequest.TeamSeasonID, SwimmerTeamRequest.UserSwimmerID)));
        }
        
        public virtual void SwimmerTeamRequestDelete(int SwimmerTeamRequestID)
        {
            ServiceProvider.SwimmerTeamRequestDelete(SwimmerTeamRequestID);
        }
        
        public virtual Swimomatic.Entity.SwimmerTeamRequest SwimmerTeamRequestGet(int SwimmerTeamRequestID)
        {
            return ((Swimomatic.Entity.SwimmerTeamRequest)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.SwimmerTeamRequest(), ServiceProvider.SwimmerTeamRequestGet(SwimmerTeamRequestID))));
        }
        
        public virtual Swimomatic.Entity.SwimmerTeamRequestCollection SwimmerTeamRequestGetAll()
        {
            return ((Swimomatic.Entity.SwimmerTeamRequestCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.SwimmerTeamRequest), typeof(Swimomatic.Entity.SwimmerTeamRequestCollection), ServiceProvider.SwimmerTeamRequestGetAll())));
        }
        
        public virtual int SwimmerTeamRequestIsPermitted(int TeamSeasonID, int UserSwimmerID)
        {
            return ((int)(ServiceProvider.SwimmerTeamRequestIsPermitted(TeamSeasonID, UserSwimmerID)));
        }
    }
}
