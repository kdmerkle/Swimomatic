namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _PoolManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 08/03/2009] - Generated by LAAF CodeGen
    // </history>
    public class _PoolManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _PoolManager()
        {
        }
        
        public _PoolManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int PoolSave(Swimomatic.Entity.Pool Pool)
        {
            return ((int)(ServiceProvider.PoolSave(Pool.CreatedByUserID, Pool.CreatedDate, Pool.Description, Pool.LocationID, Pool.ModifiedByUserID, Pool.ModifiedDate, Pool.PoolID)));
        }
        
        public virtual void PoolDelete(int PoolID)
        {
            ServiceProvider.PoolDelete(PoolID);
        }
        
        public virtual Swimomatic.Entity.Pool PoolGet(int PoolID)
        {
            return ((Swimomatic.Entity.Pool)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Pool(), ServiceProvider.PoolGet(PoolID))));
        }
        
        public virtual Swimomatic.Entity.PoolCollection PoolGetAll()
        {
            return ((Swimomatic.Entity.PoolCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Pool), typeof(Swimomatic.Entity.PoolCollection), ServiceProvider.PoolGetAll())));
        }
        
        public virtual Swimomatic.Entity.PoolCollection PoolGetAllBySwimMeetID(int SwimMeetID)
        {
            return ((Swimomatic.Entity.PoolCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Pool), typeof(Swimomatic.Entity.PoolCollection), ServiceProvider.PoolGetAllBySwimMeetID(SwimMeetID))));
        }
        
        public virtual Swimomatic.Entity.Pool PoolGetByPoolConfigID(int PoolConfigID)
        {
            return ((Swimomatic.Entity.Pool)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Pool(), ServiceProvider.PoolGetByPoolConfigID(PoolConfigID))));
        }
    }
}
