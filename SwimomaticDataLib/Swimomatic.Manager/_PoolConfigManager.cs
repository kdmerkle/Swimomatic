namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _PoolConfigManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 08/28/2011] - Generated by LAAF CodeGen
    // </history>
    public class _PoolConfigManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _PoolConfigManager()
        {
        }
        
        public _PoolConfigManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int PoolConfigSave(Swimomatic.Entity.PoolConfig PoolConfig)
        {
            return ((int)(ServiceProvider.PoolConfigSave(PoolConfig.CreatedByUserID, PoolConfig.CreatedDate, PoolConfig.Description, PoolConfig.LaneCount, PoolConfig.LaneLength, PoolConfig.ModifiedByUserID, PoolConfig.ModifiedDate, PoolConfig.PoolConfigID, PoolConfig.PoolID, PoolConfig.UOMID)));
        }
        
        public virtual void PoolConfigDelete(int PoolConfigID)
        {
            ServiceProvider.PoolConfigDelete(PoolConfigID);
        }
        
        public virtual Swimomatic.Entity.PoolConfig PoolConfigGet(int PoolConfigID)
        {
            return ((Swimomatic.Entity.PoolConfig)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.PoolConfig(), ServiceProvider.PoolConfigGet(PoolConfigID))));
        }
        
        public virtual Swimomatic.Entity.PoolConfigCollection PoolConfigGetAll()
        {
            return ((Swimomatic.Entity.PoolConfigCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.PoolConfig), typeof(Swimomatic.Entity.PoolConfigCollection), ServiceProvider.PoolConfigGetAll())));
        }
        
        public virtual Swimomatic.Entity.PoolConfigCollection PoolConfigGetAllBySwimMeetID(int SwimMeetID)
        {
            return ((Swimomatic.Entity.PoolConfigCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.PoolConfig), typeof(Swimomatic.Entity.PoolConfigCollection), ServiceProvider.PoolConfigGetAllBySwimMeetID(SwimMeetID))));
        }
        
        public virtual Swimomatic.Entity.PoolConfig PoolConfigGetByHeatID(int HeatID)
        {
            return ((Swimomatic.Entity.PoolConfig)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.PoolConfig(), ServiceProvider.PoolConfigGetByHeatID(HeatID))));
        }
        
        public virtual Swimomatic.Entity.PoolConfig PoolConfigGetByHeatSheetID(int HeatSheetID)
        {
            return ((Swimomatic.Entity.PoolConfig)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.PoolConfig(), ServiceProvider.PoolConfigGetByHeatSheetID(HeatSheetID))));
        }
        
        public virtual Swimomatic.Entity.PoolConfig PoolConfigGetByHeatSheetEventID(int HeatSheetEventID)
        {
            return ((Swimomatic.Entity.PoolConfig)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.PoolConfig(), ServiceProvider.PoolConfigGetByHeatSheetEventID(HeatSheetEventID))));
        }
        
        public virtual Swimomatic.Entity.PoolConfigCollection PoolConfigGetAllByLocationIDList(string LocationIDList)
        {
            return ((Swimomatic.Entity.PoolConfigCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.PoolConfig), typeof(Swimomatic.Entity.PoolConfigCollection), ServiceProvider.PoolConfigGetAllByLocationIDList(LocationIDList))));
        }
        
        public virtual Swimomatic.Entity.PoolConfigCollection PoolConfigGetAllByLocationID(int LocationID)
        {
            return ((Swimomatic.Entity.PoolConfigCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.PoolConfig), typeof(Swimomatic.Entity.PoolConfigCollection), ServiceProvider.PoolConfigGetAllByLocationID(LocationID))));
        }
        
        public virtual Swimomatic.Entity.PoolConfigCollection PoolConfigGetAllByCityRegionID(string City, int RegionID)
        {
            return ((Swimomatic.Entity.PoolConfigCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.PoolConfig), typeof(Swimomatic.Entity.PoolConfigCollection), ServiceProvider.PoolConfigGetAllByCityRegionID(City, RegionID))));
        }
        
        public virtual Swimomatic.Entity.PoolConfigCollection PoolConfigGetAllByRegionID(int RegionID)
        {
            return ((Swimomatic.Entity.PoolConfigCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.PoolConfig), typeof(Swimomatic.Entity.PoolConfigCollection), ServiceProvider.PoolConfigGetAllByRegionID(RegionID))));
        }
        
        public virtual Swimomatic.Entity.PoolConfigCollection PoolConfigGetAllByUserTeamID(int UserTeamID)
        {
            return ((Swimomatic.Entity.PoolConfigCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.PoolConfig), typeof(Swimomatic.Entity.PoolConfigCollection), ServiceProvider.PoolConfigGetAllByUserTeamID(UserTeamID))));
        }
        
        public virtual Swimomatic.Entity.PoolConfig PoolConfigGetByUserTeamID(int UserTeamID)
        {
            return ((Swimomatic.Entity.PoolConfig)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.PoolConfig(), ServiceProvider.PoolConfigGetByUserTeamID(UserTeamID))));
        }
    }
}
