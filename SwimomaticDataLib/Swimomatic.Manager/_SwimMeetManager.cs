namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _SwimMeetManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 04/30/2011] - Generated by LAAF CodeGen
    // </history>
    public class _SwimMeetManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _SwimMeetManager()
        {
        }
        
        public _SwimMeetManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int SwimMeetSave(Swimomatic.Entity.SwimMeet SwimMeet)
        {
            return ((int)(ServiceProvider.SwimMeetSave(SwimMeet.Description, SwimMeet.EndDate, SwimMeet.LocationID, SwimMeet.SeasonID, SwimMeet.StartDate, SwimMeet.SwimMeetID, SwimMeet.SwimMeetTypeID)));
        }
        
        public virtual void SwimMeetDelete(int SwimMeetID)
        {
            ServiceProvider.SwimMeetDelete(SwimMeetID);
        }
        
        public virtual Swimomatic.Entity.SwimMeet SwimMeetGet(int SwimMeetID)
        {
            return ((Swimomatic.Entity.SwimMeet)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.SwimMeet(), ServiceProvider.SwimMeetGet(SwimMeetID))));
        }
        
        public virtual Swimomatic.Entity.SwimMeetCollection SwimMeetGetAllBySwimMeetID(int SwimMeetID)
        {
            return ((Swimomatic.Entity.SwimMeetCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.SwimMeet), typeof(Swimomatic.Entity.SwimMeetCollection), ServiceProvider.SwimMeetGetAllBySwimMeetID(SwimMeetID))));
        }
        
        public virtual Swimomatic.Entity.SwimMeet SwimMeetGetByHeatSheetEventID(int HeatSheetEventID)
        {
            return ((Swimomatic.Entity.SwimMeet)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.SwimMeet(), ServiceProvider.SwimMeetGetByHeatSheetEventID(HeatSheetEventID))));
        }
        
        public virtual Swimomatic.Entity.SwimMeetCollection SwimMeetGetAllBySystemUserID(int SystemUserID)
        {
            return ((Swimomatic.Entity.SwimMeetCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.SwimMeet), typeof(Swimomatic.Entity.SwimMeetCollection), ServiceProvider.SwimMeetGetAllBySystemUserID(SystemUserID))));
        }
        
        public virtual Swimomatic.Entity.SwimMeetCollection SwimMeetGetAllBySystemUserIDAsSwimmer(int SystemUserID)
        {
            return ((Swimomatic.Entity.SwimMeetCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.SwimMeet), typeof(Swimomatic.Entity.SwimMeetCollection), ServiceProvider.SwimMeetGetAllBySystemUserIDAsSwimmer(SystemUserID))));
        }
    }
}
