namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _TeamManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 05/14/2011] - Generated by LAAF CodeGen
    // </history>
    public class _TeamManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _TeamManager()
        {
        }
        
        public _TeamManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int TeamSave(Swimomatic.Entity.Team Team)
        {
            return ((int)(ServiceProvider.TeamSave(Team.Abbrev, Team.HomePoolConfigID, Team.TeamID, Team.TeamName)));
        }
        
        public virtual void TeamDelete(int TeamID)
        {
            ServiceProvider.TeamDelete(TeamID);
        }
        
        public virtual Swimomatic.Entity.Team TeamGet(int TeamID)
        {
            return ((Swimomatic.Entity.Team)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Team(), ServiceProvider.TeamGet(TeamID))));
        }
        
        public virtual Swimomatic.Entity.TeamCollection TeamGetAll()
        {
            return ((Swimomatic.Entity.TeamCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Team), typeof(Swimomatic.Entity.TeamCollection), ServiceProvider.TeamGetAll())));
        }
        
        public virtual Swimomatic.Entity.TeamCollection TeamGetAllBySwimMeetID(int SwimMeetID)
        {
            return ((Swimomatic.Entity.TeamCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Team), typeof(Swimomatic.Entity.TeamCollection), ServiceProvider.TeamGetAllBySwimMeetID(SwimMeetID))));
        }
        
        public virtual Swimomatic.Entity.Team TeamGetByHeatSwimmerID(int HeatSwimmerID)
        {
            return ((Swimomatic.Entity.Team)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Team(), ServiceProvider.TeamGetByHeatSwimmerID(HeatSwimmerID))));
        }
        
        public virtual Swimomatic.Entity.TeamCollection TeamGetAllCurrentSeasonByLeagueID(int LeagueID)
        {
            return ((Swimomatic.Entity.TeamCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Team), typeof(Swimomatic.Entity.TeamCollection), ServiceProvider.TeamGetAllCurrentSeasonByLeagueID(LeagueID))));
        }
        
        public virtual Swimomatic.Entity.TeamCollection TeamGetAllBySeasonID(int SeasonID)
        {
            return ((Swimomatic.Entity.TeamCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Team), typeof(Swimomatic.Entity.TeamCollection), ServiceProvider.TeamGetAllBySeasonID(SeasonID))));
        }
        
        public virtual Swimomatic.Entity.TeamCollection TeamGetAllBySystemUserID(int SystemUserID)
        {
            return ((Swimomatic.Entity.TeamCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Team), typeof(Swimomatic.Entity.TeamCollection), ServiceProvider.TeamGetAllBySystemUserID(SystemUserID))));
        }
        
        public virtual Swimomatic.Entity.TeamCollection TeamGetAllBySearch(string Address, string City, string PostalCode, int RegionID, string TeamName)
        {
            return ((Swimomatic.Entity.TeamCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Team), typeof(Swimomatic.Entity.TeamCollection), ServiceProvider.TeamGetAllBySearch(Address, City, PostalCode, RegionID, TeamName))));
        }
        
        public virtual Swimomatic.Entity.Team TeamGetByUserTeamID(int UserTeamID)
        {
            return ((Swimomatic.Entity.Team)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Team(), ServiceProvider.TeamGetByUserTeamID(UserTeamID))));
        }
        
        public virtual Swimomatic.Entity.TeamCollection TeamLeagueRequestGetAllBySeasonID(int SeasonID)
        {
            return ((Swimomatic.Entity.TeamCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Team), typeof(Swimomatic.Entity.TeamCollection), ServiceProvider.TeamLeagueRequestGetAllBySeasonID(SeasonID))));
        }
        
        public virtual Swimomatic.Entity.Team TeamGetByTeamSeasonID(int TeamSeasonID)
        {
            return ((Swimomatic.Entity.Team)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Team(), ServiceProvider.TeamGetByTeamSeasonID(TeamSeasonID))));
        }
        
        public virtual Swimomatic.Entity.TeamCollection TeamLeagueRequestGetAllBySeasonIDSystemUserID(int SeasonID, int SystemUserID)
        {
            return ((Swimomatic.Entity.TeamCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Team), typeof(Swimomatic.Entity.TeamCollection), ServiceProvider.TeamLeagueRequestGetAllBySeasonIDSystemUserID(SeasonID, SystemUserID))));
        }
    }
}
