namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _SeasonManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 05/14/2011] - Generated by LAAF CodeGen
    // </history>
    public class _SeasonManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _SeasonManager()
        {
        }
        
        public _SeasonManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int SeasonSave(Swimomatic.Entity.Season Season)
        {
            return ((int)(ServiceProvider.SeasonSave(Season.AgeClassRuleCustomDate, Season.AgeClassRuleID, Season.Description, Season.EndDate, Season.LeagueID, Season.SeasonID, Season.StartDate)));
        }
        
        public virtual void SeasonDelete(int SeasonID)
        {
            ServiceProvider.SeasonDelete(SeasonID);
        }
        
        public virtual Swimomatic.Entity.Season SeasonGet(int SeasonID)
        {
            return ((Swimomatic.Entity.Season)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Season(), ServiceProvider.SeasonGet(SeasonID))));
        }
        
        public virtual Swimomatic.Entity.SeasonCollection SeasonGetAllByTeamID(int TeamID)
        {
            return ((Swimomatic.Entity.SeasonCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Season), typeof(Swimomatic.Entity.SeasonCollection), ServiceProvider.SeasonGetAllByTeamID(TeamID))));
        }
        
        public virtual Swimomatic.Entity.Season SeasonGetByHeatSheetEventID(int HeatSheetEventID)
        {
            return ((Swimomatic.Entity.Season)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Season(), ServiceProvider.SeasonGetByHeatSheetEventID(HeatSheetEventID))));
        }
        
        public virtual Swimomatic.Entity.SeasonCollection SeasonGetAllCurrentByLeagueID(int LeagueID)
        {
            return ((Swimomatic.Entity.SeasonCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Season), typeof(Swimomatic.Entity.SeasonCollection), ServiceProvider.SeasonGetAllCurrentByLeagueID(LeagueID))));
        }
        
        public virtual Swimomatic.Entity.Season SeasonGetByTeamSeasonID(int TeamSeasonID)
        {
            return ((Swimomatic.Entity.Season)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Season(), ServiceProvider.SeasonGetByTeamSeasonID(TeamSeasonID))));
        }
        
        public virtual Swimomatic.Entity.SeasonCollection SeasonGetAllBySearch(string LeagueName, int RegionID)
        {
            return ((Swimomatic.Entity.SeasonCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Season), typeof(Swimomatic.Entity.SeasonCollection), ServiceProvider.SeasonGetAllBySearch(LeagueName, RegionID))));
        }
        
        public virtual Swimomatic.Entity.SeasonCollection SeasonGetAllByLeagueID(int LeagueID)
        {
            return ((Swimomatic.Entity.SeasonCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Season), typeof(Swimomatic.Entity.SeasonCollection), ServiceProvider.SeasonGetAllByLeagueID(LeagueID))));
        }
        
        public virtual Swimomatic.Entity.Season SeasonGetBySeasonIDSystemUserID(int SeasonID, int SystemUserID)
        {
            return ((Swimomatic.Entity.Season)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Season(), ServiceProvider.SeasonGetBySeasonIDSystemUserID(SeasonID, SystemUserID))));
        }
        
        public virtual Swimomatic.Entity.SeasonCollection SeasonGetAllByLeagueIDSystemUserID(int LeagueID, int SystemUserID)
        {
            return ((Swimomatic.Entity.SeasonCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Season), typeof(Swimomatic.Entity.SeasonCollection), ServiceProvider.SeasonGetAllByLeagueIDSystemUserID(LeagueID, SystemUserID))));
        }
    }
}
