namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _ScoringSchemeManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 04/20/2011] - Generated by LAAF CodeGen
    // </history>
    public class _ScoringSchemeManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _ScoringSchemeManager()
        {
        }
        
        public _ScoringSchemeManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int ScoringSchemeSave(Swimomatic.Entity.ScoringScheme ScoringScheme)
        {
            return ((int)(ServiceProvider.ScoringSchemeSave(ScoringScheme.Description, ScoringScheme.IndividualPoints, ScoringScheme.IsUSASwimming, ScoringScheme.LaneCount, ScoringScheme.RelayPoints, ScoringScheme.ScoringEventTypeID, ScoringScheme.ScoringSchemeID)));
        }
        
        public virtual void ScoringSchemeDelete(int ScoringSchemeID)
        {
            ServiceProvider.ScoringSchemeDelete(ScoringSchemeID);
        }
        
        public virtual Swimomatic.Entity.ScoringScheme ScoringSchemeGet(int ScoringSchemeID)
        {
            return ((Swimomatic.Entity.ScoringScheme)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.ScoringScheme(), ServiceProvider.ScoringSchemeGet(ScoringSchemeID))));
        }
        
        public virtual Swimomatic.Entity.ScoringSchemeCollection ScoringSchemeGetAllByUSASwimmingScoringEventTypeID(bool IsUSASwimming, int ScoringEventTypeID)
        {
            return ((Swimomatic.Entity.ScoringSchemeCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.ScoringScheme), typeof(Swimomatic.Entity.ScoringSchemeCollection), ServiceProvider.ScoringSchemeGetAllByUSASwimmingScoringEventTypeID(IsUSASwimming, ScoringEventTypeID))));
        }
        
        public virtual Swimomatic.Entity.ScoringSchemeCollection ScoringSchemeGetAllBySeasonID(int SeasonID)
        {
            return ((Swimomatic.Entity.ScoringSchemeCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.ScoringScheme), typeof(Swimomatic.Entity.ScoringSchemeCollection), ServiceProvider.ScoringSchemeGetAllBySeasonID(SeasonID))));
        }
        
        public virtual Swimomatic.Entity.ScoringSchemeCollection ScoringSchemeGetAllByHeatSheetEventID(int HeatSheetEventID)
        {
            return ((Swimomatic.Entity.ScoringSchemeCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.ScoringScheme), typeof(Swimomatic.Entity.ScoringSchemeCollection), ServiceProvider.ScoringSchemeGetAllByHeatSheetEventID(HeatSheetEventID))));
        }
    }
}
