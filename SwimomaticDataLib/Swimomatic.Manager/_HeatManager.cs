namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _HeatManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 08/03/2009] - Generated by LAAF CodeGen
    // </history>
    public class _HeatManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _HeatManager()
        {
        }
        
        public _HeatManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int HeatSave(Swimomatic.Entity.Heat Heat)
        {
            return ((int)(ServiceProvider.HeatSave(Heat.HeatID, Heat.HeatNumber, Heat.HeatSheetEventID)));
        }
        
        public virtual void HeatDelete(int HeatID)
        {
            ServiceProvider.HeatDelete(HeatID);
        }
        
        public virtual Swimomatic.Entity.Heat HeatGet(int HeatID)
        {
            return ((Swimomatic.Entity.Heat)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Heat(), ServiceProvider.HeatGet(HeatID))));
        }
        
        public virtual Swimomatic.Entity.Heat HeatGetByHeatSwimmerID(int HeatSwimmerID)
        {
            return ((Swimomatic.Entity.Heat)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Heat(), ServiceProvider.HeatGetByHeatSwimmerID(HeatSwimmerID))));
        }
        
        public virtual void HeatDeleteByHeatSheetEventID(int HeatSheetEventID)
        {
            ServiceProvider.HeatDeleteByHeatSheetEventID(HeatSheetEventID);
        }
        
        public virtual Swimomatic.Entity.HeatCollection HeatGetAllByHeatSheetEventID(int HeatSheetEventID)
        {
            return ((Swimomatic.Entity.HeatCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Heat), typeof(Swimomatic.Entity.HeatCollection), ServiceProvider.HeatGetAllByHeatSheetEventID(HeatSheetEventID))));
        }
    }
}
