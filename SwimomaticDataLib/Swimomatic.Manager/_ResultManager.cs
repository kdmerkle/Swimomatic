namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _ResultManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 12/21/2011] - Generated by LAAF CodeGen
    // </history>
    public class _ResultManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _ResultManager()
        {
        }
        
        public _ResultManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int ResultSave(Swimomatic.Entity.Result Result)
        {
            return ((int)(ServiceProvider.ResultSave(Result.AgeClassID, Result.CreatedByUserID, Result.CreatedDate, Result.Disqualified, Result.Distance, Result.ElapsedTime, Result.EventDate, Result.HeatSwimmerID, Result.IsCertified, Result.IsProtested, Result.LaneLength, Result.ModifiedByUserID, Result.ModifiedDate, Result.Place, Result.Points, Result.ResultID, Result.ScoringSchemeID, Result.Split, Result.StrokeID, Result.SwimmerID, Result.SwimmerTeamSeasonID, Result.TeamSeasonID, Result.UOMID)));
        }
        
        public virtual void ResultDelete(int ResultID)
        {
            ServiceProvider.ResultDelete(ResultID);
        }
        
        public virtual Swimomatic.Entity.Result ResultGet(int ResultID)
        {
            return ((Swimomatic.Entity.Result)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Result(), ServiceProvider.ResultGet(ResultID))));
        }
        
        public virtual Swimomatic.Entity.ResultCollection ResultGetAllBySwimMeetID(int SwimMeetID)
        {
            return ((Swimomatic.Entity.ResultCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Result), typeof(Swimomatic.Entity.ResultCollection), ServiceProvider.ResultGetAllBySwimMeetID(SwimMeetID))));
        }
        
        public virtual Swimomatic.Entity.Result ResultGetByHeatSwimmerID(int HeatSwimmerID)
        {
            return ((Swimomatic.Entity.Result)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Result(), ServiceProvider.ResultGetByHeatSwimmerID(HeatSwimmerID))));
        }
        
        public virtual Swimomatic.Entity.ResultCollection ResultGetAllByHeatSheetEventID(int HeatSheetEventID)
        {
            return ((Swimomatic.Entity.ResultCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Result), typeof(Swimomatic.Entity.ResultCollection), ServiceProvider.ResultGetAllByHeatSheetEventID(HeatSheetEventID))));
        }
        
        public virtual Swimomatic.Entity.ResultCollection ResultGetAllByHeatSheetEventIDSwimmerID(int HeatSheetEventID, int SwimmerID)
        {
            return ((Swimomatic.Entity.ResultCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Result), typeof(Swimomatic.Entity.ResultCollection), ServiceProvider.ResultGetAllByHeatSheetEventIDSwimmerID(HeatSheetEventID, SwimmerID))));
        }
    }
}
