namespace Swimomatic.Manager
{
    
    
    // Logical Architect Application Framework
    // Logical Architect (LogArch, Inc)
    // www.logicalarchitect.com
    //  
    // <summary>
    // The _LocationManager class is the base manager class.
    // This class should not be modified manually.
    // </summary>
    // <history>
    // 		[Updated on 02/21/2011] - Generated by LAAF CodeGen
    // </history>
    public class _LocationManager
    {
        
        private Swimomatic.ServiceProvider.SwimomaticServiceProvider _ServiceProvider;
        
        #region  Constructor 
        public _LocationManager()
        {
        }
        
        public _LocationManager(Swimomatic.ServiceProvider.SwimomaticServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
        }
        #endregion
        
        #region  Service Provider 
        public virtual Swimomatic.ServiceProvider.SwimomaticServiceProvider ServiceProvider
        {
            get
            {
                if ((_ServiceProvider == null))
                {
                    _ServiceProvider = Swimomatic.ServiceProvider.SwimomaticServiceProvider.GetInstance();
                }
                return _ServiceProvider;
            }
        }
        #endregion
        
        public virtual int LocationSave(Swimomatic.Entity.Location Location)
        {
            return ((int)(ServiceProvider.LocationSave(Location.Address, Location.City, Location.CreatedByUserID, Location.CreatedDate, Location.Latitude, Location.LocationID, Location.Longitude, Location.ModifiedByUserID, Location.ModifiedDate, Location.Name, Location.PostalCode, Location.RegionID)));
        }
        
        public virtual void LocationDelete(int LocationID)
        {
            ServiceProvider.LocationDelete(LocationID);
        }
        
        public virtual Swimomatic.Entity.Location LocationGet(int LocationID)
        {
            return ((Swimomatic.Entity.Location)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Location(), ServiceProvider.LocationGet(LocationID))));
        }
        
        public virtual Swimomatic.Entity.LocationCollection LocationGetAll()
        {
            return ((Swimomatic.Entity.LocationCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Location), typeof(Swimomatic.Entity.LocationCollection), ServiceProvider.LocationGetAll())));
        }
        
        public virtual Swimomatic.Entity.Location LocationGetBySwimMeetID(int SwimMeetID)
        {
            return ((Swimomatic.Entity.Location)(LAAF.Data.Helper.MapDataToLAEntity(new Swimomatic.Entity.Location(), ServiceProvider.LocationGetBySwimMeetID(SwimMeetID))));
        }
        
        public virtual Swimomatic.Entity.LocationCollection LocationGetAllByRegionID(int RegionID)
        {
            return ((Swimomatic.Entity.LocationCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Location), typeof(Swimomatic.Entity.LocationCollection), ServiceProvider.LocationGetAllByRegionID(RegionID))));
        }
        
        public virtual Swimomatic.Entity.LocationCollection LocationGetAllByCityRegionID(string City, int RegionID)
        {
            return ((Swimomatic.Entity.LocationCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Location), typeof(Swimomatic.Entity.LocationCollection), ServiceProvider.LocationGetAllByCityRegionID(City, RegionID))));
        }
        
        public virtual Swimomatic.Entity.LocationCollection LocationGetAllBySystemUserID(int SystemUserID)
        {
            return ((Swimomatic.Entity.LocationCollection)(LAAF.Data.Helper.MapDataToLAEntityCollection(typeof(Swimomatic.Entity.Location), typeof(Swimomatic.Entity.LocationCollection), ServiceProvider.LocationGetAllBySystemUserID(SystemUserID))));
        }
    }
}
