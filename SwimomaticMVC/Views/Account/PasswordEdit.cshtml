@model SwimomaticMVC.Models.PasswordEdit
@{
    ViewBag.Title = "Edit Password";
}
<h2>
    Edit Password</h2>
<p>
    To finish resetting your password, enter the temporary password you were emailed
    and then enter a new password and confirm it.
</p>
<p>
    Password requirements:
    <ul>
        <li>8-30 characters long</li>
        <li>At least 1 capital letter</li>
        <li>At least 1 number</li>
        <li>At least one of these non-alphanumeric characters: <strong>? = . * [ ] ! @@ # $
            % ^ & * ( ) _ + " : ; ' > < , </strong></li>
    </ul>
</p>
@using (Html.BeginForm("PasswordEdit", "Account"))
{
    @Html.ValidationSummary(true, "There was a problem updating your password. Please correct the errors and try again.")
    <div>
        <fieldset>
            <div>
                @Html.HiddenFor(m => m.SystemUserID, new { @value = Model.SystemUserID })
                @Html.LabelFor(m => m.TemporaryPassword, "Temporary password")
            </div>
            <div>
                @Html.PasswordFor(m => m.TemporaryPassword, new { @class = "input-box medium" })
                @Html.ValidationMessageFor(m => m.TemporaryPassword)
            </div>
            <div>
                @Html.LabelFor(m => m.NewPassword)
            </div>
            <div>
                @Html.PasswordFor(m => m.NewPassword, new { @class = "input-box long" })
                @Html.ValidationMessageFor(m => m.NewPassword)
            </div>
            <div>
                @Html.LabelFor(m => m.ConfirmPassword)
            </div>
            <div>
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "input-box long" })
                @Html.ValidationMessageFor(m => m.ConfirmPassword)
            </div>
            <input class="button" type="submit" value="Continue" />
            <input id="btnCancel" type="button" class="button" value="Cancel" onclick="javascript:window.location = '/Account/logon';" />
        </fieldset>
    </div>
}